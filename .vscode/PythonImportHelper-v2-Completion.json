[
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "inquirer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inquirer",
        "description": "inquirer",
        "detail": "inquirer",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "patoolib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patoolib",
        "description": "patoolib",
        "detail": "patoolib",
        "documentation": {}
    },
    {
        "label": "Platform_Amstrad_Cpcplus",
        "importPath": "Platform_Amstrad_Cpcplus",
        "description": "Platform_Amstrad_Cpcplus",
        "isExtraImport": true,
        "detail": "Platform_Amstrad_Cpcplus",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleI",
        "importPath": "Platform_Apple_AppleI",
        "description": "Platform_Apple_AppleI",
        "isExtraImport": true,
        "detail": "Platform_Apple_AppleI",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleII",
        "importPath": "Platform_Apple_AppleII",
        "description": "Platform_Apple_AppleII",
        "isExtraImport": true,
        "detail": "Platform_Apple_AppleII",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleIIGS",
        "importPath": "Platform_Apple_AppleIIGS",
        "description": "Platform_Apple_AppleIIGS",
        "isExtraImport": true,
        "detail": "Platform_Apple_AppleIIGS",
        "documentation": {}
    },
    {
        "label": "Platform_Arcade_Arcade",
        "importPath": "Platform_Arcade_Arcade",
        "description": "Platform_Arcade_Arcade",
        "isExtraImport": true,
        "detail": "Platform_Arcade_Arcade",
        "documentation": {}
    },
    {
        "label": "Platform_Archimedes_Acorn",
        "importPath": "Platform_Archimedes_Acorn",
        "description": "Platform_Archimedes_Acorn",
        "isExtraImport": true,
        "detail": "Platform_Archimedes_Acorn",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_2600",
        "importPath": "Platform_Atari_2600",
        "description": "Platform_Atari_2600",
        "isExtraImport": true,
        "detail": "Platform_Atari_2600",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_5200",
        "importPath": "Platform_Atari_5200",
        "description": "Platform_Atari_5200",
        "isExtraImport": true,
        "detail": "Platform_Atari_5200",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_7800",
        "importPath": "Platform_Atari_7800",
        "description": "Platform_Atari_7800",
        "isExtraImport": true,
        "detail": "Platform_Atari_7800",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_Jaguar",
        "importPath": "Platform_Atari_Jaguar",
        "description": "Platform_Atari_Jaguar",
        "isExtraImport": true,
        "detail": "Platform_Atari_Jaguar",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_Lynx",
        "importPath": "Platform_Atari_Lynx",
        "description": "Platform_Atari_Lynx",
        "isExtraImport": true,
        "detail": "Platform_Atari_Lynx",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_STETTFalcon",
        "importPath": "Platform_Atari_STETTFalcon",
        "description": "Platform_Atari_STETTFalcon",
        "isExtraImport": true,
        "detail": "Platform_Atari_STETTFalcon",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_xlxe",
        "importPath": "Platform_Atari_xlxe",
        "description": "Platform_Atari_xlxe",
        "isExtraImport": true,
        "detail": "Platform_Atari_xlxe",
        "documentation": {}
    },
    {
        "label": "Platform_Bandai_Wonderswan",
        "importPath": "Platform_Bandai_Wonderswan",
        "description": "Platform_Bandai_Wonderswan",
        "isExtraImport": true,
        "detail": "Platform_Bandai_Wonderswan",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_64",
        "importPath": "Platform_Commodore_64",
        "description": "Platform_Commodore_64",
        "isExtraImport": true,
        "detail": "Platform_Commodore_64",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_128",
        "importPath": "Platform_Commodore_128",
        "description": "Platform_Commodore_128",
        "isExtraImport": true,
        "detail": "Platform_Commodore_128",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Amiga",
        "importPath": "Platform_Commodore_Amiga",
        "description": "Platform_Commodore_Amiga",
        "isExtraImport": true,
        "detail": "Platform_Commodore_Amiga",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_CBMII",
        "importPath": "Platform_Commodore_CBMII",
        "description": "Platform_Commodore_CBMII",
        "isExtraImport": true,
        "detail": "Platform_Commodore_CBMII",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Pet",
        "importPath": "Platform_Commodore_Pet",
        "description": "Platform_Commodore_Pet",
        "isExtraImport": true,
        "detail": "Platform_Commodore_Pet",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Plus4",
        "importPath": "Platform_Commodore_Plus4",
        "description": "Platform_Commodore_Plus4",
        "isExtraImport": true,
        "detail": "Platform_Commodore_Plus4",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Vic20",
        "importPath": "Platform_Commodore_Vic20",
        "description": "Platform_Commodore_Vic20",
        "isExtraImport": true,
        "detail": "Platform_Commodore_Vic20",
        "documentation": {}
    },
    {
        "label": "Platform_Elektronika_Pdp11",
        "importPath": "Platform_Elektronika_Pdp11",
        "description": "Platform_Elektronika_Pdp11",
        "isExtraImport": true,
        "detail": "Platform_Elektronika_Pdp11",
        "documentation": {}
    },
    {
        "label": "Platform_Enterprise_Ep128",
        "importPath": "Platform_Enterprise_Ep128",
        "description": "Platform_Enterprise_Ep128",
        "isExtraImport": true,
        "detail": "Platform_Enterprise_Ep128",
        "documentation": {}
    },
    {
        "label": "Platform_Fairchild_Channelf",
        "importPath": "Platform_Fairchild_Channelf",
        "description": "Platform_Fairchild_Channelf",
        "isExtraImport": true,
        "detail": "Platform_Fairchild_Channelf",
        "documentation": {}
    },
    {
        "label": "Platform_FanCon_Pico8",
        "importPath": "Platform_FanCon_Pico8",
        "description": "Platform_FanCon_Pico8",
        "isExtraImport": true,
        "detail": "Platform_FanCon_Pico8",
        "documentation": {}
    },
    {
        "label": "Platform_Gamepark_2X",
        "importPath": "Platform_Gamepark_2X",
        "description": "Platform_Gamepark_2X",
        "isExtraImport": true,
        "detail": "Platform_Gamepark_2X",
        "documentation": {}
    },
    {
        "label": "Platform_Gamepark_32",
        "importPath": "Platform_Gamepark_32",
        "description": "Platform_Gamepark_32",
        "isExtraImport": true,
        "detail": "Platform_Gamepark_32",
        "documentation": {}
    },
    {
        "label": "Platform_GCE_Vectrex",
        "importPath": "Platform_GCE_Vectrex",
        "description": "Platform_GCE_Vectrex",
        "isExtraImport": true,
        "detail": "Platform_GCE_Vectrex",
        "documentation": {}
    },
    {
        "label": "Platform_Java_Java",
        "importPath": "Platform_Java_Java",
        "description": "Platform_Java_Java",
        "isExtraImport": true,
        "detail": "Platform_Java_Java",
        "documentation": {}
    },
    {
        "label": "Platform_Linux_Linux",
        "importPath": "Platform_Linux_Linux",
        "description": "Platform_Linux_Linux",
        "isExtraImport": true,
        "detail": "Platform_Linux_Linux",
        "documentation": {}
    },
    {
        "label": "Platform_Magnavox_Odyssey",
        "importPath": "Platform_Magnavox_Odyssey",
        "description": "Platform_Magnavox_Odyssey",
        "isExtraImport": true,
        "detail": "Platform_Magnavox_Odyssey",
        "documentation": {}
    },
    {
        "label": "Platform_Mattel_Intellivision",
        "importPath": "Platform_Mattel_Intellivision",
        "description": "Platform_Mattel_Intellivision",
        "isExtraImport": true,
        "detail": "Platform_Mattel_Intellivision",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Msdos",
        "importPath": "Platform_Microsoft_Msdos",
        "description": "Platform_Microsoft_Msdos",
        "isExtraImport": true,
        "detail": "Platform_Microsoft_Msdos",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Msx",
        "importPath": "Platform_Microsoft_Msx",
        "description": "Platform_Microsoft_Msx",
        "isExtraImport": true,
        "detail": "Platform_Microsoft_Msx",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Windows",
        "importPath": "Platform_Microsoft_Windows",
        "description": "Platform_Microsoft_Windows",
        "isExtraImport": true,
        "detail": "Platform_Microsoft_Windows",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Xbox",
        "importPath": "Platform_Microsoft_Xbox",
        "description": "Platform_Microsoft_Xbox",
        "isExtraImport": true,
        "detail": "Platform_Microsoft_Xbox",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc98",
        "importPath": "Platform_Nec_Pc98",
        "description": "Platform_Nec_Pc98",
        "isExtraImport": true,
        "detail": "Platform_Nec_Pc98",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc8000",
        "importPath": "Platform_Nec_Pc8000",
        "description": "Platform_Nec_Pc8000",
        "isExtraImport": true,
        "detail": "Platform_Nec_Pc8000",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc8800",
        "importPath": "Platform_Nec_Pc8800",
        "description": "Platform_Nec_Pc8800",
        "isExtraImport": true,
        "detail": "Platform_Nec_Pc8800",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pcengine",
        "importPath": "Platform_Nec_Pcengine",
        "description": "Platform_Nec_Pcengine",
        "isExtraImport": true,
        "detail": "Platform_Nec_Pcengine",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pcfx",
        "importPath": "Platform_Nec_Pcfx",
        "description": "Platform_Nec_Pcfx",
        "isExtraImport": true,
        "detail": "Platform_Nec_Pcfx",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Supergrafx",
        "importPath": "Platform_Nec_Supergrafx",
        "description": "Platform_Nec_Supergrafx",
        "isExtraImport": true,
        "detail": "Platform_Nec_Supergrafx",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_3DS",
        "importPath": "Platform_Nintendo_3DS",
        "description": "Platform_Nintendo_3DS",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_3DS",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Famicom",
        "importPath": "Platform_Nintendo_Famicom",
        "description": "Platform_Nintendo_Famicom",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_Famicom",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_FamicomDisksystem",
        "importPath": "Platform_Nintendo_FamicomDisksystem",
        "description": "Platform_Nintendo_FamicomDisksystem",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_FamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Gameboy",
        "importPath": "Platform_Nintendo_Gameboy",
        "description": "Platform_Nintendo_Gameboy",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_Gameboy",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameboyAdvance",
        "importPath": "Platform_Nintendo_GameboyAdvance",
        "description": "Platform_Nintendo_GameboyAdvance",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_GameboyAdvance",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameboyColor",
        "importPath": "Platform_Nintendo_GameboyColor",
        "description": "Platform_Nintendo_GameboyColor",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_GameboyColor",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameCube",
        "importPath": "Platform_Nintendo_GameCube",
        "description": "Platform_Nintendo_GameCube",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_GameCube",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_N64",
        "importPath": "Platform_Nintendo_N64",
        "description": "Platform_Nintendo_N64",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_N64",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Pokemini",
        "importPath": "Platform_Nintendo_Pokemini",
        "description": "Platform_Nintendo_Pokemini",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_Pokemini",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_SuperFamicom",
        "importPath": "Platform_Nintendo_SuperFamicom",
        "description": "Platform_Nintendo_SuperFamicom",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_SuperFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Wii",
        "importPath": "Platform_Nintendo_Wii",
        "description": "Platform_Nintendo_Wii",
        "isExtraImport": true,
        "detail": "Platform_Nintendo_Wii",
        "documentation": {}
    },
    {
        "label": "Platform_Palm_PalmOS",
        "importPath": "Platform_Palm_PalmOS",
        "description": "Platform_Palm_PalmOS",
        "isExtraImport": true,
        "detail": "Platform_Palm_PalmOS",
        "documentation": {}
    },
    {
        "label": "Platform_Panasonic_3do",
        "importPath": "Platform_Panasonic_3do",
        "description": "Platform_Panasonic_3do",
        "isExtraImport": true,
        "detail": "Platform_Panasonic_3do",
        "documentation": {}
    },
    {
        "label": "Platform_Phillips_Cdi",
        "importPath": "Platform_Phillips_Cdi",
        "description": "Platform_Phillips_Cdi",
        "isExtraImport": true,
        "detail": "Platform_Phillips_Cdi",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_32X",
        "importPath": "Platform_Sega_32X",
        "description": "Platform_Sega_32X",
        "isExtraImport": true,
        "detail": "Platform_Sega_32X",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Dreamcast",
        "importPath": "Platform_Sega_Dreamcast",
        "description": "Platform_Sega_Dreamcast",
        "isExtraImport": true,
        "detail": "Platform_Sega_Dreamcast",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_GameGear",
        "importPath": "Platform_Sega_GameGear",
        "description": "Platform_Sega_GameGear",
        "isExtraImport": true,
        "detail": "Platform_Sega_GameGear",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Mastersystem",
        "importPath": "Platform_Sega_Mastersystem",
        "description": "Platform_Sega_Mastersystem",
        "isExtraImport": true,
        "detail": "Platform_Sega_Mastersystem",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Megadrive",
        "importPath": "Platform_Sega_Megadrive",
        "description": "Platform_Sega_Megadrive",
        "isExtraImport": true,
        "detail": "Platform_Sega_Megadrive",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Saturn",
        "importPath": "Platform_Sega_Saturn",
        "description": "Platform_Sega_Saturn",
        "isExtraImport": true,
        "detail": "Platform_Sega_Saturn",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_SG1000",
        "importPath": "Platform_Sega_SG1000",
        "description": "Platform_Sega_SG1000",
        "isExtraImport": true,
        "detail": "Platform_Sega_SG1000",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Stv",
        "importPath": "Platform_Sega_Stv",
        "description": "Platform_Sega_Stv",
        "isExtraImport": true,
        "detail": "Platform_Sega_Stv",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Vmu",
        "importPath": "Platform_Sega_Vmu",
        "description": "Platform_Sega_Vmu",
        "isExtraImport": true,
        "detail": "Platform_Sega_Vmu",
        "documentation": {}
    },
    {
        "label": "Platform_Sinclair_Zx81",
        "importPath": "Platform_Sinclair_Zx81",
        "description": "Platform_Sinclair_Zx81",
        "isExtraImport": true,
        "detail": "Platform_Sinclair_Zx81",
        "documentation": {}
    },
    {
        "label": "Platform_Sinclair_Zxspectrum",
        "importPath": "Platform_Sinclair_Zxspectrum",
        "description": "Platform_Sinclair_Zxspectrum",
        "isExtraImport": true,
        "detail": "Platform_Sinclair_Zxspectrum",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_Neogeo",
        "importPath": "Platform_Snk_Neogeo",
        "description": "Platform_Snk_Neogeo",
        "isExtraImport": true,
        "detail": "Platform_Snk_Neogeo",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_NeogeoPocket",
        "importPath": "Platform_Snk_NeogeoPocket",
        "description": "Platform_Snk_NeogeoPocket",
        "isExtraImport": true,
        "detail": "Platform_Snk_NeogeoPocket",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_NeogeoPocketColor",
        "importPath": "Platform_Snk_NeogeoPocketColor",
        "description": "Platform_Snk_NeogeoPocketColor",
        "isExtraImport": true,
        "detail": "Platform_Snk_NeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Ps2",
        "importPath": "Platform_Sony_Ps2",
        "description": "Platform_Sony_Ps2",
        "isExtraImport": true,
        "detail": "Platform_Sony_Ps2",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Psp",
        "importPath": "Platform_Sony_Psp",
        "description": "Platform_Sony_Psp",
        "isExtraImport": true,
        "detail": "Platform_Sony_Psp",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Psx",
        "importPath": "Platform_Sony_Psx",
        "description": "Platform_Sony_Psx",
        "isExtraImport": true,
        "detail": "Platform_Sony_Psx",
        "documentation": {}
    },
    {
        "label": "Platform_SpectraVision_SpectraVideo",
        "importPath": "Platform_SpectraVision_SpectraVideo",
        "description": "Platform_SpectraVision_SpectraVideo",
        "isExtraImport": true,
        "detail": "Platform_SpectraVision_SpectraVideo",
        "documentation": {}
    },
    {
        "label": "Platform_Thomson_MOTO",
        "importPath": "Platform_Thomson_MOTO",
        "description": "Platform_Thomson_MOTO",
        "isExtraImport": true,
        "detail": "Platform_Thomson_MOTO",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_Gamemusic",
        "importPath": "Platform_Wild_Gamemusic",
        "description": "Platform_Wild_Gamemusic",
        "isExtraImport": true,
        "detail": "Platform_Wild_Gamemusic",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_VideoFFMPEG",
        "importPath": "Platform_Wild_VideoFFMPEG",
        "description": "Platform_Wild_VideoFFMPEG",
        "isExtraImport": true,
        "detail": "Platform_Wild_VideoFFMPEG",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_VideoMPV",
        "importPath": "Platform_Wild_VideoMPV",
        "description": "Platform_Wild_VideoMPV",
        "isExtraImport": true,
        "detail": "Platform_Wild_VideoMPV",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(0x03, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x03\\xff\\\ni\\\nmport QtQuick 2.\\\n0\\x0aimport QtQuick\\\n.Controls 1.4\\x0aRo\\\nw {\\x0a    id: prod\\\nRow\\x0a    anchors.\\\nleft: parent.lef\\\nt\\x0a    anchors.le\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": ".url",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": ".url = \\x22http://p\\\nouet.net\\x22\\x0a      \\\n      }\\x0a        \\\n    Button {\\x0a   \\\n             tex\\\nt: qsTr(\\x22Back\\x22)\\x0a\\\n                \\\nenabled: webengi\\\nneView.canGoBack\\\n\\x0a               \\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "ring",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "ring = url.toStr\\\ning()\\x0a          \\\n  if(urlString.s\\\nearch(\\x22prod.php\\x22\\\n) > 0) {\\x0a       \\\n         var idS\\\ntart = urlString\\\n.lastIndexOf(\\x22=\\x22\\\n) + 1\\x0a          \\\n      var id = u\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "tart",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "tart = urlString\\\n.lastIndexOf(\\x22=\\x22\\\n) + 1\\x0a          \\\n      var id = u\\\nrlString.substri\\\nng(idStart, urlS\\\ntring.length)\\x0a  \\\n              se\\\nlectedId = id\\x0a  \\\n          } else\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "lectedId",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "lectedId = id\\x0a  \\\n          } else\\\n {\\x0a             \\\n   selectedId = \\\n0\\x0a            }\\x0a\\\n        }\\x0a    }\\x0a\\\n}\\x0a\\\n\\x00\\x00\\x03\\xbf\\\ni\\\nmport QtQuick 2.\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "ible",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "ible = !parent.v\\\nisible\\x0a         \\\n   }\\x0a        }\\x0a \\\n   }\\x0a    Button \\\n{\\x0a        text: \\\nqsTr(\\x22Cancel\\x22)\\x0a \\\n       onClicked\\\n: showetHelper.c\\\nancelDemo()\\x0a    \\\n    anchors.righ\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "uest",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "uest = null\\x0a    \\\n        searchIn\\\nProgress = false\\\n\\x0a        }\\x0a    }\\\n\\x0a\\x0a    function s\\\nearchClicked() {\\\n\\x0a        var sea\\\nrchRequest = new\\\n XMLHttpRequest(\\\n);\\x0a        var u\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "Progress",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "Progress = false\\\n\\x0a        }\\x0a    }\\\n\\x0a\\x0a    function s\\\nearchClicked() {\\\n\\x0a        var sea\\\nrchRequest = new\\\n XMLHttpRequest(\\\n);\\x0a        var u\\\nrl = \\x22http://api\\\n.pouet.net/v1/se\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "rchRequest",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "rchRequest = new\\\n XMLHttpRequest(\\\n);\\x0a        var u\\\nrl = \\x22http://api\\\n.pouet.net/v1/se\\\narch/prod/?q=\\x22 +\\\n headerBox.searc\\\nhText\\x0a        if\\\n(headerBox.platf\\\norm.length > 1) \\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "rl",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "rl = \\x22http://api\\\n.pouet.net/v1/se\\\narch/prod/?q=\\x22 +\\\n headerBox.searc\\\nhText\\x0a        if\\\n(headerBox.platf\\\norm.length > 1) \\\n{\\x0a            ur\\\nl += \\x22&platform=\\\n\\x22 + headerBox.pl\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "nProgress",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "nProgress = true\\\n\\x0a        searchR\\\nequest.onreadyst\\\natechange=functi\\\non() {\\x0a         \\\n   if (searchReq\\\nuest.readyState \\\n=== XMLHttpReque\\\nst.DONE) {\\x0a     \\\n           searc\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "nt",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "nt = {\\x0a         \\\n           \\x22name\\\n\\x22: prod[\\x22name\\x22],\\\n\\x0a               \\\n     \\x22id\\x22: prod[\\\n\\x22id\\x22],\\x0a         \\\n           \\x22type\\\n\\x22: prod[\\x22type\\x22],\\\n\\x0a               \\\n     \\x22voteup\\x22: p\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "latform\\x22]",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "latform\\x22] = prod\\\n[\\x22platforms\\x22][pl\\\natform][\\x22slug\\x22]\\x0a\\\n                \\\n    listElement[\\\n\\x22platformicon\\x22] \\\n= prod[\\x22platform\\\ns\\x22][platform][\\x22i\\\ncon\\x22]\\x0a          \\\n          break\\x0a\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "ment[\\x22group\\x22]",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "ment[\\x22group\\x22] = \\\nprod[\\x22groups\\x22][g\\\nroup][\\x22name\\x22]\\x0a  \\\n                \\\n  break\\x0a        \\\n        }\\x0a      \\\n          if(hea\\\nderBox.platform.\\\nlength < 2 || he\\\naderBox.platform\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 5,
            "peekOfCode": " = null\\x0a        \\\nsearchInProgress\\\n = false\\x0a    }\\x0a}\\\n\\x0a\\\n\\x00\\x00\\x05\\x0e\\\ni\\\nmport QtQuick 2.\\\n0\\x0aimport QtQuick\\\n.Controls 1.4\\x0aim\\\nport QtQuick.Lay\\"
        },
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": " = null\\x0a        \\\nsearchInProgress\\\n = false\\x0a    }\\x0a}\\\n\\x0a\\\n\\x00\\x00\\x05\\x0e\\\ni\\\nmport QtQuick 2.\\\n0\\x0aimport QtQuick\\\n.Controls 1.4\\x0aim\\\nport QtQuick.Lay\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 5,
            "peekOfCode": " = false\\x0a    }\\x0a}\\\n\\x0a\\\n\\x00\\x00\\x05\\x0e\\\ni\\\nmport QtQuick 2.\\\n0\\x0aimport QtQuick\\\n.Controls 1.4\\x0aim\\\nport QtQuick.Lay\\\nouts 1.2\\x0a\\x0aGroupB\\\nox {\\x0a    propert\\"
        },
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": " = false\\x0a    }\\x0a}\\\n\\x0a\\\n\\x00\\x00\\x05\\x0e\\\ni\\\nmport QtQuick 2.\\\n0\\x0aimport QtQuick\\\n.Controls 1.4\\x0aim\\\nport QtQuick.Lay\\\nouts 1.2\\x0a\\x0aGroupB\\\nox {\\x0a    propert\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": ".text",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": ".text = errorTex\\\nt\\x0a    }\\x0a\\x0a    Dia\\\nlog {\\x0a        id\\\n: launchErrorDia\\\nlog\\x0a        prop\\\nerty alias text:\\\n errorText.text\\x0a\\\n        visible:\\\n text != \\x22\\x22\\x0a    \\\n    title: \\x22Laun\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "text = \\x22\\x22\\x0a    }\\x0a\\\n\\x0a\\x0a\\x0a    function \\\nshowInfo(id) {\\x0a \\\n       Qt.openUr\\\nlExternally(\\x22htt\\\np://www.pouet.ne\\\nt/prod.php?which\\\n=\\x22 + id);\\x0a    }\\x0a\\\n\\x0a    Component.o\\\nnCompleted: show\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x10\\\n\\x09\\xe5\\xe6\\xfc\\\n\\x00P\\\n\\x00r\\x00o\\x00d\\x00D\\x00e\\x00l\\x00e\\x00g\\x00a\\x00t\\x00e\\x00.\\x00q\\x00m\\x00l\\\n\\x00\\x0f\\\n\\x02\\x1d\\x01\\xfc\\\n\\x00B\\\n\\x00r\\x00o\\x00w\\x00s\\x00e\\x00r\\x00V\\x00i\\x00e\\x00w\\x00.\\x00q\\x00m\\x00l\\\n\\x00\\x12\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct",
        "kind": 5,
        "importPath": "showet-gui.qml_rc",
        "description": "showet-gui.qml_rc",
        "peekOfCode": "qt_resource_struct = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00&\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x04\\x03\\\n\\x00\\x00\\x01\\x8e\\x92b\\x1c\\xc5\\\n\\x00\\x00\\x00\\xd4\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xf2/\\\n\\x00\\x00\\x01\\x8e\\x92a\\xed-\\\n\\x00\\x00\\x00t\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0eM\\\n\\x00\\x00\\x01\\x8eC]n\\xcc\\\n\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xe1\\xc7\\",
        "detail": "showet-gui.qml_rc",
        "documentation": {}
    },
    {
        "label": "Platform_Amstrad_Cpcplus",
        "kind": 6,
        "importPath": "Platform_Amstrad_Cpcplus",
        "description": "Platform_Amstrad_Cpcplus",
        "peekOfCode": "class Platform_Amstrad_Cpcplus(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"zesarux\"]\n    cores = [\"crocods_libretro\", \"cap32_libretro\"]\n    extensions = [\"dsk\", \"sna\", \"kcr\", \"zip\",\n                  \"tap\", \"cdt\", \"voc\", \"cpr\", \"m3u\"]\n    def run(self):",
        "detail": "Platform_Amstrad_Cpcplus",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleI",
        "kind": 6,
        "importPath": "Platform_Apple_AppleI",
        "description": "Platform_Apple_AppleI",
        "peekOfCode": "class Platform_Apple_AppleI(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    cores = [\"minivmac_libretro\"]\n    extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Apple_AppleI",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleII",
        "kind": 6,
        "importPath": "Platform_Apple_AppleII",
        "description": "Platform_Apple_AppleII",
        "peekOfCode": "class Platform_Apple_AppleII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    cores = [\"minivmac_libretro\"]\n    extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Apple_AppleII",
        "documentation": {}
    },
    {
        "label": "Platform_Apple_AppleIIGS",
        "kind": 6,
        "importPath": "Platform_Apple_AppleIIGS",
        "description": "Platform_Apple_AppleIIGS",
        "peekOfCode": "class Platform_Apple_AppleIIGS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    cores = [\"minivmac_libretro\"]\n    extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Apple_AppleIIGS",
        "documentation": {}
    },
    {
        "label": "Platform_Arcade_Arcade",
        "kind": 6,
        "importPath": "Platform_Arcade_Arcade",
        "description": "Platform_Arcade_Arcade",
        "peekOfCode": "class Platform_Arcade_Arcade(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"MAME\", \"MESS\"]\n    cores = [\"mame_libretro\", \"mamemess_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Arcade_Arcade",
        "documentation": {}
    },
    {
        "label": "Platform_Archimedes_Acorn",
        "kind": 6,
        "importPath": "Platform_Archimedes_Acorn",
        "description": "Platform_Archimedes_Acorn",
        "peekOfCode": "class Platform_Archimedes_Acorn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['mame_libretro', 'mame2016_libretro']\n    extensions = ['zip', 'chd', '7z', 'cmd']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Archimedes_Acorn",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_2600",
        "kind": 6,
        "importPath": "Platform_Atari_2600",
        "description": "Platform_Atari_2600",
        "peekOfCode": "class Platform_Atari_2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'stella']\n    cores = ['stella2014_libretro', 'stella_libretro']\n    extensions = ['zip', 'a26', 'bin']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_2600",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_5200",
        "kind": 6,
        "importPath": "Platform_Atari_5200",
        "description": "Platform_Atari_5200",
        "peekOfCode": "class Platform_Atari_5200(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'atari800']\n    cores = ['atari800_libretro']\n    extensions = ['zip', 'xfd', 'atr', 'cdm', 'cas', 'bin', 'a52', 'atx', 'car', 'rom', 'com', 'xex']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_5200",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_7800",
        "kind": 6,
        "importPath": "Platform_Atari_7800",
        "description": "Platform_Atari_7800",
        "peekOfCode": "class Platform_Atari_7800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'prosystem']\n    cores = ['prosystem_libretro']\n    extensions = ['zip', 'a78', 'bin', 'cdf']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_7800",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_Jaguar",
        "kind": 6,
        "importPath": "Platform_Atari_Jaguar",
        "description": "Platform_Atari_Jaguar",
        "peekOfCode": "class Platform_Atari_Jaguar(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['virtualjaguar_libretro']\n    extensions = ['zip', 'j64', 'jag', 'rom', 'abs', 'cof', 'bin', 'prg']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_Jaguar",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_Lynx",
        "kind": 6,
        "importPath": "Platform_Atari_Lynx",
        "description": "Platform_Atari_Lynx",
        "peekOfCode": "class Platform_Atari_Lynx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'mednafen']\n    cores = ['handy_libretro', 'mednafen_lynx_libretro']\n    extensions = ['lnx', 'o']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_Lynx",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_STETTFalcon",
        "kind": 6,
        "importPath": "Platform_Atari_STETTFalcon",
        "description": "Platform_Atari_STETTFalcon",
        "peekOfCode": "class Platform_Atari_STETTFalcon(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'stella', 'hatari']\n    cores = ['hatari_libretro', 'a5200_libretro']\n    extensions = ['st', 'msa', 'stx', 'dim', 'ipf', 'm3u']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_STETTFalcon",
        "documentation": {}
    },
    {
        "label": "Platform_Atari_xlxe",
        "kind": 6,
        "importPath": "Platform_Atari_xlxe",
        "description": "Platform_Atari_xlxe",
        "peekOfCode": "class Platform_Atari_xlxe(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'atari800']\n    cores = ['atari800_libretro']\n    extensions = ['st', 'msa', 'zip', 'stx', 'dim', 'ipf', 'm3u', 'xex']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Atari_xlxe",
        "documentation": {}
    },
    {
        "label": "Platform_Bandai_Wonderswan",
        "kind": 6,
        "importPath": "Platform_Bandai_Wonderswan",
        "description": "Platform_Bandai_Wonderswan",
        "peekOfCode": "class Platform_Bandai_Wonderswan(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"mednafen\"]\n    cores = [\"mednafen_wswan_libretro\"]\n    extensions = [\"zip\", \"ws\", \"wsc\", \"pc2\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Bandai_Wonderswan",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_128",
        "kind": 6,
        "importPath": "Platform_Commodore_128",
        "description": "Platform_Commodore_128",
        "peekOfCode": "class Platform_Commodore_128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vice']\n    cores = ['vice_x128_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n                   'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_128",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_64",
        "kind": 6,
        "importPath": "Platform_Commodore_64",
        "description": "Platform_Commodore_64",
        "peekOfCode": "class Platform_Commodore_64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\" \"x64sc\"]\n    cores = ['vice_x64sc_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82',\n                   'd8z', 'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_64",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Amiga",
        "kind": 6,
        "importPath": "Platform_Commodore_Amiga",
        "description": "Platform_Commodore_Amiga",
        "peekOfCode": "class Platform_Commodore_Amiga(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'puae', 'fs-uae']\n    cores = ['puae2021_libretro', 'puae_libretro',\n             'fsuae_libretro', 'uae4arm_libretro']\n    floppys_ext = ['adf', 'adz', 'dms', 'fdi', 'ipf']\n    harddrives_ext = ['hdf', 'hdz', 'datadir']",
        "detail": "Platform_Commodore_Amiga",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_CBMII",
        "kind": 6,
        "importPath": "Platform_Commodore_CBMII",
        "description": "Platform_Commodore_CBMII",
        "peekOfCode": "class Platform_Commodore_CBMII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vice']\n    cores = ['vice_xcbm2_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n                   'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_CBMII",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Pet",
        "kind": 6,
        "importPath": "Platform_Commodore_Pet",
        "description": "Platform_Commodore_Pet",
        "peekOfCode": "class Platform_Commodore_Pet(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vice']\n    cores = ['vice_xpet_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n                   'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_Pet",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Plus4",
        "kind": 6,
        "importPath": "Platform_Commodore_Plus4",
        "description": "Platform_Commodore_Plus4",
        "peekOfCode": "class Platform_Commodore_Plus4(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vice']\n    cores = ['vice_xplus4_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n                   'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_Plus4",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore_Vic20",
        "kind": 6,
        "importPath": "Platform_Commodore_Vic20",
        "description": "Platform_Commodore_Vic20",
        "peekOfCode": "class Platform_Commodore_Vic20(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vice']\n    cores = ['vice_xvic_libretro']\n    floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n                   'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "Platform_Commodore_Vic20",
        "documentation": {}
    },
    {
        "label": "Platform_Elektronika_Pdp11",
        "kind": 6,
        "importPath": "Platform_Elektronika_Pdp11",
        "description": "Platform_Elektronika_Pdp11",
        "peekOfCode": "class Platform_Elektronika_Pdp11(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"bk\", \"m\"]\n    cores = [\"bk_libretro\"]\n    extensions = [\"bin\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Elektronika_Pdp11",
        "documentation": {}
    },
    {
        "label": "Platform_Enterprise_Ep128",
        "kind": 6,
        "importPath": "Platform_Enterprise_Ep128",
        "description": "Platform_Enterprise_Ep128",
        "peekOfCode": "class Platform_Enterprise_Ep128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"ep128\"]\n    cores = [\"ep128emu_libretro\"]\n    extensions = [\"zip\", \"img\", \"dsk\", \"tap\", \"dtf\", \"com\",\n                  \"trn\", \"128\", \"bas\", \"cas\", \"cdt\", \"tzx\", \".\"]\n    def run(self):",
        "detail": "Platform_Enterprise_Ep128",
        "documentation": {}
    },
    {
        "label": "Platform_Fairchild_Channelf",
        "kind": 6,
        "importPath": "Platform_Fairchild_Channelf",
        "description": "Platform_Fairchild_Channelf",
        "peekOfCode": "class Platform_Fairchild_Channelf(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"freechaf\"]\n    cores = [\"freechaf_libretro\"]\n    extensions = [\"zip\", \"bin\", \"chf\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Fairchild_Channelf",
        "documentation": {}
    },
    {
        "label": "Platform_FanCon_Pico8",
        "kind": 6,
        "importPath": "Platform_FanCon_Pico8",
        "description": "Platform_FanCon_Pico8",
        "peekOfCode": "class Platform_FanCon_Pico8(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"retro8\"]\n    cores = [\"retro8_libretro\"]\n    extensions = [\"zip\", \"p8\", \"png\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_FanCon_Pico8",
        "documentation": {}
    },
    {
        "label": "Platform_GCE_Vectrex",
        "kind": 6,
        "importPath": "Platform_GCE_Vectrex",
        "description": "Platform_GCE_Vectrex",
        "peekOfCode": "class Platform_GCE_Vectrex(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"vecx\"]\n    cores = [\"vecx_libretro\"]\n    extensions = [\"zip\", \"bin\", \"vec\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_GCE_Vectrex",
        "documentation": {}
    },
    {
        "label": "Platform_Gamepark_2X",
        "kind": 6,
        "importPath": "Platform_Gamepark_2X",
        "description": "Platform_Gamepark_2X",
        "peekOfCode": "class Platform_Gamepark_2X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"mame\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Gamepark_2X",
        "documentation": {}
    },
    {
        "label": "Platform_Gamepark_32",
        "kind": 6,
        "importPath": "Platform_Gamepark_32",
        "description": "Platform_Gamepark_32",
        "peekOfCode": "class Platform_Gamepark_32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"mame\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Gamepark_32",
        "documentation": {}
    },
    {
        "label": "Platform_Java_Java",
        "kind": 6,
        "importPath": "Platform_Java_Java",
        "description": "Platform_Java_Java",
        "peekOfCode": "class Platform_Java_Java(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"squirreljme\"]\n    cores = [\"squirreljme_libretro\"]\n    extensions = [\"zip\", \"jar\", \"sqc\", \"jam\", \"jad\", \"kjx\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Java_Java",
        "documentation": {}
    },
    {
        "label": "Platform_Linux_Linux",
        "kind": 6,
        "importPath": "Platform_Linux_Linux",
        "description": "Platform_Linux_Linux",
        "peekOfCode": "class Platform_Linux_Linux(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"bash\"]\n    cores = [\"bash\"]\n    extensions = [\"elf\", \"exe\"]\n    def run(self):\n        emulator = self.emulators[0]",
        "detail": "Platform_Linux_Linux",
        "documentation": {}
    },
    {
        "label": "Platform_Magnavox_Odyssey",
        "kind": 6,
        "importPath": "Platform_Magnavox_Odyssey",
        "description": "Platform_Magnavox_Odyssey",
        "peekOfCode": "class Platform_Magnavox_Odyssey(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"o2em\"]\n    cores = [\"o2em_libretro\"]\n    extensions = [\"zip\", \"bin\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Magnavox_Odyssey",
        "documentation": {}
    },
    {
        "label": "Platform_Mattel_Intellivision",
        "kind": 6,
        "importPath": "Platform_Mattel_Intellivision",
        "description": "Platform_Mattel_Intellivision",
        "peekOfCode": "class Platform_Mattel_Intellivision(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"freeintv\"]\n    cores = [\"freeintv_libretro\", \"jzintv\", \"jzintv-ecs\"]\n    extensions = [\"int\", \"bin\", \"rom\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Mattel_Intellivision",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Msdos",
        "kind": 6,
        "importPath": "Platform_Microsoft_Msdos",
        "description": "Platform_Microsoft_Msdos",
        "peekOfCode": "class Platform_Microsoft_Msdos(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"dosbox\"]\n    cores = [\"dosbox_core_libretro\", \"dosbox_pure_libretro\",\n             \"dosbox_svn_libretro\", \"dosbox_svn_ce_libretro\"]\n    extensions = [\"zip\", \"dosz\", \"exe\", \"com\", \"bat\", \"iso\", \"cue\",\n                  \"ins\", \"img\", \"ima\", \"vhd\", \"jrc\", \"tc\", \"m3u\", \"m3u8\"]",
        "detail": "Platform_Microsoft_Msdos",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Msx",
        "kind": 6,
        "importPath": "Platform_Microsoft_Msx",
        "description": "Platform_Microsoft_Msx",
        "peekOfCode": "class Platform_Microsoft_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\",\n                 \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]\n    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n                  \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]",
        "detail": "Platform_Microsoft_Msx",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Windows",
        "kind": 6,
        "importPath": "Platform_Microsoft_Windows",
        "description": "Platform_Microsoft_Windows",
        "peekOfCode": "class Platform_Microsoft_Windows(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"wine\", \"proton\"]\n    cores = [\"wine\"]\n    extensions = [\"exe\"]\n    wineprefix = self.showetdir + '/wineprefix'\n    def run(self, emulator, core, extensions):",
        "detail": "Platform_Microsoft_Windows",
        "documentation": {}
    },
    {
        "label": "Platform_Microsoft_Xbox",
        "kind": 6,
        "importPath": "Platform_Microsoft_Xbox",
        "description": "Platform_Microsoft_Xbox",
        "peekOfCode": "class Platform_Microsoft_Xbox(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"directxbox_libretro\"]\n    extensions = [\"zip\", \"iso\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Microsoft_Xbox",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc8000",
        "kind": 6,
        "importPath": "Platform_Nec_Pc8000",
        "description": "Platform_Nec_Pc8000",
        "peekOfCode": "class Platform_Nec_Pc8000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"quasi88_libretro\"]\n    extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Nec_Pc8000",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc8800",
        "kind": 6,
        "importPath": "Platform_Nec_Pc8800",
        "description": "Platform_Nec_Pc8800",
        "peekOfCode": "class Platform_Nec_Pc8800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"quasi88_libretro\"]\n    extensions = [\"d88\", \"u88\", \"m3u\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Nec_Pc8800",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pc98",
        "kind": 6,
        "importPath": "Platform_Nec_Pc98",
        "description": "Platform_Nec_Pc98",
        "peekOfCode": "class Platform_Nec_Pc98(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"nekop2_libretro\"]\n    extensions = [\"d98\", \"zip\", \"98d\", \"fdi\", \"fdd\", \"2hd\", \"tfd\", \"d88\",\n                  \"88d\", \"hdm\", \"xdf\", \"dup\", \"cmd\", \"hdi\", \"thd\", \"nhd\", \"hdd\"]\n    def run(self):",
        "detail": "Platform_Nec_Pc98",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pcengine",
        "kind": 6,
        "importPath": "Platform_Nec_Pcengine",
        "description": "Platform_Nec_Pcengine",
        "peekOfCode": "class Platform_Nec_Pcengine(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n             \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\"]\n    extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):",
        "detail": "Platform_Nec_Pcengine",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Pcfx",
        "kind": 6,
        "importPath": "Platform_Nec_Pcfx",
        "description": "Platform_Nec_Pcfx",
        "peekOfCode": "class Platform_Nec_Pcfx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mednafen_pcfx_libretro\"]\n    extensions = [\"cue\", \"ccd\", \"toc\", \"chd\"]\n    def run(self):\n        emulator = self.emulators[0]",
        "detail": "Platform_Nec_Pcfx",
        "documentation": {}
    },
    {
        "label": "Platform_Nec_Supergrafx",
        "kind": 6,
        "importPath": "Platform_Nec_Supergrafx",
        "description": "Platform_Nec_Supergrafx",
        "peekOfCode": "class Platform_Nec_Supergrafx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n             \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\",]\n    extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):",
        "detail": "Platform_Nec_Supergrafx",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_3DS",
        "kind": 6,
        "importPath": "Platform_Nintendo_3DS",
        "description": "Platform_Nintendo_3DS",
        "peekOfCode": "class Platform_Nintendo_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"citra\"]\n    cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n             \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]\n    extensions = [\"3ds\", \"3dsx\", \"elf\", \"axf\", \"cci\", \"cxi\", \"app\"]\n    def run(self):",
        "detail": "Platform_Nintendo_3DS",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Famicom",
        "kind": 6,
        "importPath": "Platform_Nintendo_Famicom",
        "description": "Platform_Nintendo_Famicom",
        "peekOfCode": "class Platform_Nintendo_Famicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"higan\", \"emux\",\n                 \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n             \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    extensions = [\"zip\", \"nes\", \"fds\", \"unf\",",
        "detail": "Platform_Nintendo_Famicom",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_FamicomDisksystem",
        "kind": 6,
        "importPath": "Platform_Nintendo_FamicomDisksystem",
        "description": "Platform_Nintendo_FamicomDisksystem",
        "peekOfCode": "class Platform_Nintendo_FamicomDisksystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"higan\", \"emux\",\n                 \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n             \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    extensions = [\"zip\", \"nes\", \"fds\", \"unf\", \"unif\", \"qd\", \"nsf\"]",
        "detail": "Platform_Nintendo_FamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameCube",
        "kind": 6,
        "importPath": "Platform_Nintendo_GameCube",
        "description": "Platform_Nintendo_GameCube",
        "peekOfCode": "class Platform_Nintendo_GameCube(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"dolphin_libretro\"]\n    extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n                  \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "Platform_Nintendo_GameCube",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Gameboy",
        "kind": 6,
        "importPath": "Platform_Nintendo_Gameboy",
        "description": "Platform_Nintendo_Gameboy",
        "peekOfCode": "class Platform_Nintendo_Gameboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"gambatte_libretro\", \"mess2016_libretro\",\n             \"mess_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    extensions = [\"zip\", \"gb\", \"dmg\", \"bin\", \"u1\", \"ndd\", \"zip\"]\n    def run(self):",
        "detail": "Platform_Nintendo_Gameboy",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameboyAdvance",
        "kind": 6,
        "importPath": "Platform_Nintendo_GameboyAdvance",
        "description": "Platform_Nintendo_GameboyAdvance",
        "peekOfCode": "class Platform_Nintendo_GameboyAdvance(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"meteor_libretro\", \"vba_next_libretro\",\n             \"vbam_libretro\", \"mgba_libretro\", \"gpsp_libretro\"]\n    extensions = [\"zip\", \"gb\", \"gbc\", \"gba\", \"dmg\", \"agb\", \"bin\", \"cgb\", \"sgb\"]\n    def run(self):",
        "detail": "Platform_Nintendo_GameboyAdvance",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_GameboyColor",
        "kind": 6,
        "importPath": "Platform_Nintendo_GameboyColor",
        "description": "Platform_Nintendo_GameboyColor",
        "peekOfCode": "class Platform_Nintendo_GameboyColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"gambatte_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    extensions = [\"zip\", \"gbc\", \"dmg\", \"bin\", \"u1\", \"ndd\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Nintendo_GameboyColor",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_N64",
        "kind": 6,
        "importPath": "Platform_Nintendo_N64",
        "description": "Platform_Nintendo_N64",
        "peekOfCode": "class Platform_Nintendo_N64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"mupen64plus-glide64\",\n                 \"mupen64plus-glide64-lle\", \"mupen64plus-gliden64\"]\n    cores = [\"mupen64plus_libretro\",\n             \"mupen64plus_next_libretro\", \"parallel_n46_libretro\"]\n    extensions = [\"n64\", \"v64\", \"z64\", \"bin\", \"u1\", \"ndd\"]",
        "detail": "Platform_Nintendo_N64",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Pokemini",
        "kind": 6,
        "importPath": "Platform_Nintendo_Pokemini",
        "description": "Platform_Nintendo_Pokemini",
        "peekOfCode": "class Platform_Nintendo_Pokemini(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"pokemini_libretro\"]\n    extensions = [\"zip\", \"min\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Nintendo_Pokemini",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_SuperFamicom",
        "kind": 6,
        "importPath": "Platform_Nintendo_SuperFamicom",
        "description": "Platform_Nintendo_SuperFamicom",
        "peekOfCode": "class Platform_Nintendo_SuperFamicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"snes9x_libretro\"]\n    extensions = [\"zip\", \"sfc\", \"smc\", \"fig\", \"swc\", \"bs\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Nintendo_SuperFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_Nintendo_Wii",
        "kind": 6,
        "importPath": "Platform_Nintendo_Wii",
        "description": "Platform_Nintendo_Wii",
        "peekOfCode": "class Platform_Nintendo_Wii(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"dolphin_libretro\"]\n    extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n                  \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "Platform_Nintendo_Wii",
        "documentation": {}
    },
    {
        "label": "Platform_Palm_PalmOS",
        "kind": 6,
        "importPath": "Platform_Palm_PalmOS",
        "description": "Platform_Palm_PalmOS",
        "peekOfCode": "class Platform_Palm_PalmOS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['mu_libretro']\n    extensions = ['prc', 'pqa', 'img', 'pdb', 'zip']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Palm_PalmOS",
        "documentation": {}
    },
    {
        "label": "Platform_Panasonic_3do",
        "kind": 6,
        "importPath": "Platform_Panasonic_3do",
        "description": "Platform_Panasonic_3do",
        "peekOfCode": "class Platform_Panasonic_3do(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"4do_libretro\", \"opera_libretro\"]\n    extensions = [\"iso\", \"bin\", \"chd\", \"cue\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Panasonic_3do",
        "documentation": {}
    },
    {
        "label": "Platform_Phillips_Cdi",
        "kind": 6,
        "importPath": "Platform_Phillips_Cdi",
        "description": "Platform_Phillips_Cdi",
        "peekOfCode": "class Platform_Phillips_Cdi(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"samecdi_libretro\", \"cdi2015_libretro\"]\n    extensions = [\"zip\", \"chd\", \"iso\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Phillips_Cdi",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_32X",
        "kind": 6,
        "importPath": "Platform_Sega_32X",
        "description": "Platform_Sega_32X",
        "peekOfCode": "class Platform_Sega_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'picodrive']\n    cores = ['picodrive_libretro', 'blastem_libretro']\n    extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md',\n                  '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']\n    def run(self):",
        "detail": "Platform_Sega_32X",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Dreamcast",
        "kind": 6,
        "importPath": "Platform_Sega_Dreamcast",
        "description": "Platform_Sega_Dreamcast",
        "peekOfCode": "class Platform_Sega_Dreamcast(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'flycast', 'redream']\n    cores = ['flycast_libretro', 'flycast_gles2_libretro', 'retrodream_libretro']\n    extensions = ['chd', 'cdi', 'elf', 'bin', 'cue',\n                  'gdi', 'lst', 'zip', 'dat', '7z', 'm3u']\n    def run(self):",
        "detail": "Platform_Sega_Dreamcast",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_GameGear",
        "kind": 6,
        "importPath": "Platform_Sega_GameGear",
        "description": "Platform_Sega_GameGear",
        "peekOfCode": "class Platform_Sega_GameGear(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'osmose']\n    cores = ['gearsystem_libretro',\n             'genesis_plus_gx_libretro', 'fbneo_gg_libretro']\n    extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):",
        "detail": "Platform_Sega_GameGear",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Mastersystem",
        "kind": 6,
        "importPath": "Platform_Sega_Mastersystem",
        "description": "Platform_Sega_Mastersystem",
        "peekOfCode": "class Platform_Sega_Mastersystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'osmose']\n    cores = ['genesis_plus_gx_libretro', 'fbneo_sms_libretro',\n             'gearsystem_libretro', 'picodrive_libretro', 'smsplus_gx_libreto']\n    extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n                  'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "Platform_Sega_Mastersystem",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Megadrive",
        "kind": 6,
        "importPath": "Platform_Sega_Megadrive",
        "description": "Platform_Sega_Megadrive",
        "peekOfCode": "class Platform_Sega_Megadrive(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'dgen']\n    cores = ['genesis_plus_gx_libretro',\n             'fbneo_md_libretro', 'picodrive_libretro']\n    extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n                  'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "Platform_Sega_Megadrive",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_SG1000",
        "kind": 6,
        "importPath": "Platform_Sega_SG1000",
        "description": "Platform_Sega_SG1000",
        "peekOfCode": "class Platform_Sega_SG1000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'gearsystem']\n    cores = ['gearsystem_libretro', 'bluemsx_libretro']\n    extensions = ['rom', 'ri', 'mx1', 'mx2',\n                  'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']\n    def run(self):",
        "detail": "Platform_Sega_SG1000",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Saturn",
        "kind": 6,
        "importPath": "Platform_Sega_Saturn",
        "description": "Platform_Sega_Saturn",
        "peekOfCode": "class Platform_Sega_Saturn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'yabause', 'kronos']\n    cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sega_Saturn",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Stv",
        "kind": 6,
        "importPath": "Platform_Sega_Stv",
        "description": "Platform_Sega_Stv",
        "peekOfCode": "class Platform_Sega_Stv(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'yabause', 'kronos']\n    cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    extensions = ['zip', 'ccd', 'chd', 'cue', 'iso', 'mds', 'm3u']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sega_Stv",
        "documentation": {}
    },
    {
        "label": "Platform_Sega_Vmu",
        "kind": 6,
        "importPath": "Platform_Sega_Vmu",
        "description": "Platform_Sega_Vmu",
        "peekOfCode": "class Platform_Sega_Vmu(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'vemulator']\n    cores = ['vemulator_libretro']\n    extensions = ['zip', 'vms', 'dci', 'bin']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sega_Vmu",
        "documentation": {}
    },
    {
        "label": "Platform_Sinclair_Zx81",
        "kind": 6,
        "importPath": "Platform_Sinclair_Zx81",
        "description": "Platform_Sinclair_Zx81",
        "peekOfCode": "class Platform_Sinclair_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"81\"]\n    cores = [\"fuse_libretro\", \"81_libretro\"]\n    extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sinclair_Zx81",
        "documentation": {}
    },
    {
        "label": "Platform_Sinclair_Zxspectrum",
        "kind": 6,
        "importPath": "Platform_Sinclair_Zxspectrum",
        "description": "Platform_Sinclair_Zxspectrum",
        "peekOfCode": "class Platform_Sinclair_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\"]\n    cores = [\"fuse_libretro\", \"81_libretro\"]\n    extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sinclair_Zxspectrum",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_Neogeo",
        "kind": 6,
        "importPath": "Platform_Snk_Neogeo",
        "description": "Platform_Snk_Neogeo",
        "peekOfCode": "class Platform_Snk_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Snk_Neogeo",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_NeogeoPocket",
        "kind": 6,
        "importPath": "Platform_Snk_NeogeoPocket",
        "description": "Platform_Snk_NeogeoPocket",
        "peekOfCode": "class Platform_Snk_NeogeoPocket(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['mednafen_ngp_libretro', 'fbneo_ngp']\n    extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Snk_NeogeoPocket",
        "documentation": {}
    },
    {
        "label": "Platform_Snk_NeogeoPocketColor",
        "kind": 6,
        "importPath": "Platform_Snk_NeogeoPocketColor",
        "description": "Platform_Snk_NeogeoPocketColor",
        "peekOfCode": "class Platform_Snk_NeogeoPocketColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['mednafen_ngp_libretro', 'fbneo_ngpc']\n    extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Snk_NeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Ps2",
        "kind": 6,
        "importPath": "Platform_Sony_Ps2",
        "description": "Platform_Sony_Ps2",
        "peekOfCode": "class Platform_Sony_Ps2(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['pcsx2_libretro', 'play_libretro']\n    extensions = ['zip', 'exe', 'psexe', 'cue', 'toc', 'bin', 'img',\n                  'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']\n    def run(self):",
        "detail": "Platform_Sony_Ps2",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Psp",
        "kind": 6,
        "importPath": "Platform_Sony_Psp",
        "description": "Platform_Sony_Psp",
        "peekOfCode": "class Platform_Sony_Psp(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'ppsspp']\n    cores = ['ppsspp_libretro']\n    extensions = ['elf', 'iso', 'cso', 'prx', 'pbp']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Sony_Psp",
        "documentation": {}
    },
    {
        "label": "Platform_Sony_Psx",
        "kind": 6,
        "importPath": "Platform_Sony_Psx",
        "description": "Platform_Sony_Psx",
        "peekOfCode": "class Platform_Sony_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['pcsx_rearmed_libretro',\n             'mednafen_psx_libretro', 'swanstation_libretro']\n    extensions = ['zip', 'exe', 'psx', 'psexe', 'cue', 'toc', 'bin', 'img',\n                  'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']",
        "detail": "Platform_Sony_Psx",
        "documentation": {}
    },
    {
        "label": "Platform_SpectraVision_SpectraVideo",
        "kind": 6,
        "importPath": "Platform_SpectraVision_SpectraVideo",
        "description": "Platform_SpectraVision_SpectraVideo",
        "peekOfCode": "class Platform_SpectraVision_SpectraVideo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['bluemsx_libretro']\n    extensions = ['rom', 'ri', 'mx1', 'mx2',\n                  'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']\n    def run(self):",
        "detail": "Platform_SpectraVision_SpectraVideo",
        "documentation": {}
    },
    {
        "label": "Platform_Thomson_MOTO",
        "kind": 6,
        "importPath": "Platform_Thomson_MOTO",
        "description": "Platform_Thomson_MOTO",
        "peekOfCode": "class Platform_Thomson_MOTO(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['theodore_libretro']\n    extensions = ['fd', 'sap', 'k7', 'm7', 'm5', 'rom']\n    def run(self):\n        \"\"\"",
        "detail": "Platform_Thomson_MOTO",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_Gamemusic",
        "kind": 6,
        "importPath": "Platform_Wild_Gamemusic",
        "description": "Platform_Wild_Gamemusic",
        "peekOfCode": "class Platform_Wild_Gamemusic(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['gme_libretro']\n    extensions = ['zip', 'ay', 'gbs', 'gym', 'hes',\n                  'kss', 'nsf', 'nsfe', 'sap', 'spc', 'vgm', 'vgz']\n    def run(self):",
        "detail": "Platform_Wild_Gamemusic",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_VideoFFMPEG",
        "kind": 6,
        "importPath": "Platform_Wild_VideoFFMPEG",
        "description": "Platform_Wild_VideoFFMPEG",
        "peekOfCode": "class Platform_Wild_VideoFFMPEG(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['ffmpeg_libretro']\n    extensions = ['mkv', 'avi', 'f4v', 'f4f', '3gp', 'ogm', 'flv', 'mp4', 'mp3', 'flac', 'ogg', 'm4a', 'webm',\n                  '3g2', 'mov', 'wmv', 'mpg', 'mpeg', 'vob', 'asf', 'divx', 'm2p', 'm2ts', 'ps', 'ts', 'mxf', 'wma', 'wav']\n    def run(self):",
        "detail": "Platform_Wild_VideoFFMPEG",
        "documentation": {}
    },
    {
        "label": "Platform_Wild_VideoMPV",
        "kind": 6,
        "importPath": "Platform_Wild_VideoMPV",
        "description": "Platform_Wild_VideoMPV",
        "peekOfCode": "class Platform_Wild_VideoMPV(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'other']\n    cores = ['mpv_libretro']\n    extensions = ['mkv', 'avi', 'f4v', 'f4f', '3gp', 'ogm', 'flv', 'mp4', 'mp3', 'flac', 'ogg', 'm4a', 'webm',\n                  '3g2', 'mov', 'wmv', 'mpg', 'mpeg', 'vob', 'asf', 'divx', 'm2p', 'm2ts', 'ps', 'ts', 'mxf', 'wma', 'wav']\n    def run(self):",
        "detail": "Platform_Wild_VideoMPV",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "kind": 6,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "class PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True\n    def __init__(self):\n        self.showetdir = None",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "COREPATH",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "COREPATH = '/home/rizzo/.config/retroarch/cores'\nFULLSCREEN = False\nSELECTIVE_MODE = True\nDEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "FULLSCREEN = False\nSELECTIVE_MODE = True\nDEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "SELECTIVE_MODE",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "SELECTIVE_MODE = True\nDEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "DEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True\n    def __init__(self):",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "COREPATH",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "COREPATH = '/home/rizzo/.config/retroarch/cores'\nFULLSCREEN = False\nDEBUGGING = True\nparser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nparser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')\nargs = parser.parse_args()",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "DEBUGGING = True\nparser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')\nargs = parser.parse_args()\n# In priority order",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "parser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')\nargs = parser.parse_args()\n# In priority order\nplatform_runners = [",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "args = parser.parse_args()\n# In priority order\nplatform_runners = [\n    Platform_Amstrad_Cpcplus(),\n    Platform_Apple_AppleI(),\n    Platform_Apple_AppleII(),\n    Platform_Apple_AppleIIGS(),\n    Platform_Arcade_Arcade(),\n    Platform_Archimedes_Acorn(),\n    Platform_Atari_2600(),",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "platform_runners",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "platform_runners = [\n    Platform_Amstrad_Cpcplus(),\n    Platform_Apple_AppleI(),\n    Platform_Apple_AppleII(),\n    Platform_Apple_AppleIIGS(),\n    Platform_Arcade_Arcade(),\n    Platform_Archimedes_Acorn(),\n    Platform_Atari_2600(),\n    Platform_Atari_5200(),\n    Platform_Atari_7800(),",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "showetdir",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "showetdir = os.path.expanduser(\"~/.showet\")\nif not args.pouetid:\n    print(\"No pouet id specified. Use --help to see options.\")\n    exit(-1)\n# Get the json data:\nprod_id = args.pouetid\nPROD_URL = \"http://api.pouet.net/v1/prod/?id=\" + str(prod_id)\ndatadir = showetdir + \"/data/\" + str(prod_id)\nPROD_DOWNLOAD_URL = None\nPROD_DOWNLOAD_FILENAME = None",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_id",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_id = args.pouetid\nPROD_URL = \"http://api.pouet.net/v1/prod/?id=\" + str(prod_id)\ndatadir = showetdir + \"/data/\" + str(prod_id)\nPROD_DOWNLOAD_URL = None\nPROD_DOWNLOAD_FILENAME = None\nPROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_URL",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_URL = \"http://api.pouet.net/v1/prod/?id=\" + str(prod_id)\ndatadir = showetdir + \"/data/\" + str(prod_id)\nPROD_DOWNLOAD_URL = None\nPROD_DOWNLOAD_FILENAME = None\nPROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "datadir",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "datadir = showetdir + \"/data/\" + str(prod_id)\nPROD_DOWNLOAD_URL = None\nPROD_DOWNLOAD_FILENAME = None\nPROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:\n        PROD_JSON = f.read()",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_DOWNLOAD_URL",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_DOWNLOAD_URL = None\nPROD_DOWNLOAD_FILENAME = None\nPROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:\n        PROD_JSON = f.read()\nelse:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_DOWNLOAD_FILENAME",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_DOWNLOAD_FILENAME = None\nPROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:\n        PROD_JSON = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_JSON",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_JSON = None\nPROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:\n        PROD_JSON = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):\n        os.makedirs(datadir + '/json')",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_JSON_FILENAME",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_JSON_FILENAME = datadir + \"/pouet.json\"\nif os.path.exists(PROD_JSON_FILENAME):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(PROD_JSON_FILENAME, 'r') as f:\n        PROD_JSON = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):\n        os.makedirs(datadir + '/json')\n    with urllib.request.urlopen(PROD_URL) as url:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "data = json.loads(PROD_JSON)\nPROD_PLATFORM = None\nRUNNER = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if PROD_PLATFORM is None and demoplat in prunner.supported_platforms():\n            PROD_PLATFORM = demoplat",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_PLATFORM",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_PLATFORM = None\nRUNNER = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if PROD_PLATFORM is None and demoplat in prunner.supported_platforms():\n            PROD_PLATFORM = demoplat\n            RUNNER = prunner",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "RUNNER",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "RUNNER = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if PROD_PLATFORM is None and demoplat in prunner.supported_platforms():\n            PROD_PLATFORM = demoplat\n            RUNNER = prunner\nif not RUNNER:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "platforms",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "platforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if PROD_PLATFORM is None and demoplat in prunner.supported_platforms():\n            PROD_PLATFORM = demoplat\n            RUNNER = prunner\nif not RUNNER:\n    print(\"ERROR: Platform \" + str(platforms) + \" not supported (yet!).\")",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_DOWNLOAD_URL",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_DOWNLOAD_URL = data['prod']['download']\nPROD_DOWNLOAD_URL = PROD_DOWNLOAD_URL.replace(\n    \"https://files.scene.org/view\", \"https://files.scene.org/get\")\n# Check if the download is already downloaded, else just download it.\nif os.path.exists(datadir + \"/.FILES_DOWNLOADED\"):\n    print(\"\\tFile already downloaded\")\nelse:\n    if DEBUGGING is not False:\n        print(\"\\tDownloading prod file from \" + PROD_DOWNLOAD_URL + \"...\")\n    filedata = urllib.request.urlopen(PROD_DOWNLOAD_URL)",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "PROD_DOWNLOAD_URL",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "PROD_DOWNLOAD_URL = PROD_DOWNLOAD_URL.replace(\n    \"https://files.scene.org/view\", \"https://files.scene.org/get\")\n# Check if the download is already downloaded, else just download it.\nif os.path.exists(datadir + \"/.FILES_DOWNLOADED\"):\n    print(\"\\tFile already downloaded\")\nelse:\n    if DEBUGGING is not False:\n        print(\"\\tDownloading prod file from \" + PROD_DOWNLOAD_URL + \"...\")\n    filedata = urllib.request.urlopen(PROD_DOWNLOAD_URL)\n    filename = os.path.basename(filedata.url)",
        "detail": "showet",
        "documentation": {}
    }
]