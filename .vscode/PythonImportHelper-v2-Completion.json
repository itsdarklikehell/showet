[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "importPath": "platformcommon",
        "description": "platformcommon",
        "isExtraImport": true,
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "inquirer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inquirer",
        "description": "inquirer",
        "detail": "inquirer",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "patoolib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "patoolib",
        "description": "patoolib",
        "detail": "patoolib",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "Platform_3do",
        "importPath": "platform_3do",
        "description": "platform_3do",
        "isExtraImport": true,
        "detail": "platform_3do",
        "documentation": {}
    },
    {
        "label": "Platform_Cpcplus",
        "importPath": "platform_Amstrad",
        "description": "platform_Amstrad",
        "isExtraImport": true,
        "detail": "platform_Amstrad",
        "documentation": {}
    },
    {
        "label": "Platform_Apple",
        "importPath": "platform_Apple",
        "description": "platform_Apple",
        "isExtraImport": true,
        "detail": "platform_Apple",
        "documentation": {}
    },
    {
        "label": "Platform_Arcade",
        "importPath": "platform_Arcade",
        "description": "platform_Arcade",
        "isExtraImport": true,
        "detail": "platform_Arcade",
        "documentation": {}
    },
    {
        "label": "Platform_Acorn",
        "importPath": "platform_Archimedes",
        "description": "platform_Archimedes",
        "isExtraImport": true,
        "detail": "platform_Archimedes",
        "documentation": {}
    },
    {
        "label": "Platform_Atari2600",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari5200",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari7800",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariJaguar",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariLynx",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariSTETTFalcon",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atarixlxe",
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "isExtraImport": true,
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari2600",
        "importPath": "platform_Atari2600",
        "description": "platform_Atari2600",
        "isExtraImport": true,
        "detail": "platform_Atari2600",
        "documentation": {}
    },
    {
        "label": "Platform_Atari5200",
        "importPath": "platform_Atari5200",
        "description": "platform_Atari5200",
        "isExtraImport": true,
        "detail": "platform_Atari5200",
        "documentation": {}
    },
    {
        "label": "Platform_Atari7800",
        "importPath": "platform_Atari7800",
        "description": "platform_Atari7800",
        "isExtraImport": true,
        "detail": "platform_Atari7800",
        "documentation": {}
    },
    {
        "label": "Platform_AtariJaguar",
        "importPath": "platform_AtariJaguar",
        "description": "platform_AtariJaguar",
        "isExtraImport": true,
        "detail": "platform_AtariJaguar",
        "documentation": {}
    },
    {
        "label": "Platform_AtariLynx",
        "importPath": "platform_AtariLynx",
        "description": "platform_AtariLynx",
        "isExtraImport": true,
        "detail": "platform_AtariLynx",
        "documentation": {}
    },
    {
        "label": "Platform_AtariSTETTFalcon",
        "importPath": "platform_AtariSTETTFalcon",
        "description": "platform_AtariSTETTFalcon",
        "isExtraImport": true,
        "detail": "platform_AtariSTETTFalcon",
        "documentation": {}
    },
    {
        "label": "Platform_Atarixlxe",
        "importPath": "platform_Atarixlxe",
        "description": "platform_Atarixlxe",
        "isExtraImport": true,
        "detail": "platform_Atarixlxe",
        "documentation": {}
    },
    {
        "label": "Platform_Wonderswan",
        "importPath": "platform_Bandai",
        "description": "platform_Bandai",
        "isExtraImport": true,
        "detail": "platform_Bandai",
        "documentation": {}
    },
    {
        "label": "Platform_Coleco",
        "importPath": "platform_Coleco",
        "description": "platform_Coleco",
        "isExtraImport": true,
        "detail": "platform_Coleco",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore128",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore64",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreAmiga",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreCBMII",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePet",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePlus4",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreVic20",
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "isExtraImport": true,
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore128",
        "importPath": "platform_Commodore128",
        "description": "platform_Commodore128",
        "isExtraImport": true,
        "detail": "platform_Commodore128",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore64",
        "importPath": "platform_Commodore64",
        "description": "platform_Commodore64",
        "isExtraImport": true,
        "detail": "platform_Commodore64",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreAmiga",
        "importPath": "platform_CommodoreAmiga",
        "description": "platform_CommodoreAmiga",
        "isExtraImport": true,
        "detail": "platform_CommodoreAmiga",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreCBMII",
        "importPath": "platform_CommodoreCBMII",
        "description": "platform_CommodoreCBMII",
        "isExtraImport": true,
        "detail": "platform_CommodoreCBMII",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePet",
        "importPath": "platform_CommodorePet",
        "description": "platform_CommodorePet",
        "isExtraImport": true,
        "detail": "platform_CommodorePet",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePlus4",
        "importPath": "platform_CommodorePlus4",
        "description": "platform_CommodorePlus4",
        "isExtraImport": true,
        "detail": "platform_CommodorePlus4",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreVic20",
        "importPath": "platform_CommodoreVic20",
        "description": "platform_CommodoreVic20",
        "isExtraImport": true,
        "detail": "platform_CommodoreVic20",
        "documentation": {}
    },
    {
        "label": "Platform_Pdp11",
        "importPath": "platform_Elektronika",
        "description": "platform_Elektronika",
        "isExtraImport": true,
        "detail": "platform_Elektronika",
        "documentation": {}
    },
    {
        "label": "Platform_Enterprise",
        "importPath": "platform_Enterprise",
        "description": "platform_Enterprise",
        "isExtraImport": true,
        "detail": "platform_Enterprise",
        "documentation": {}
    },
    {
        "label": "Platform_Channelf",
        "importPath": "platform_Fairchild",
        "description": "platform_Fairchild",
        "isExtraImport": true,
        "detail": "platform_Fairchild",
        "documentation": {}
    },
    {
        "label": "Platform_GP2X",
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "isExtraImport": true,
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "Platform_GP32",
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "isExtraImport": true,
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "Platform_GP2X",
        "importPath": "platform_Gamepark2X",
        "description": "platform_Gamepark2X",
        "isExtraImport": true,
        "detail": "platform_Gamepark2X",
        "documentation": {}
    },
    {
        "label": "Platform_GP32",
        "importPath": "platform_Gamepark32",
        "description": "platform_Gamepark32",
        "isExtraImport": true,
        "detail": "platform_Gamepark32",
        "documentation": {}
    },
    {
        "label": "Platform_Vectrex",
        "importPath": "platform_GCE",
        "description": "platform_GCE",
        "isExtraImport": true,
        "detail": "platform_GCE",
        "documentation": {}
    },
    {
        "label": "Platform_Java",
        "importPath": "platform_Java",
        "description": "platform_Java",
        "isExtraImport": true,
        "detail": "platform_Java",
        "documentation": {}
    },
    {
        "label": "Platform_Linux",
        "importPath": "platform_Linux",
        "description": "platform_Linux",
        "isExtraImport": true,
        "detail": "platform_Linux",
        "documentation": {}
    },
    {
        "label": "Platform_Odyssey",
        "importPath": "platform_Magnavox",
        "description": "platform_Magnavox",
        "isExtraImport": true,
        "detail": "platform_Magnavox",
        "documentation": {}
    },
    {
        "label": "Platform_Intellivision",
        "importPath": "platform_Mattel",
        "description": "platform_Mattel",
        "isExtraImport": true,
        "detail": "platform_Mattel",
        "documentation": {}
    },
    {
        "label": "Platform_Msx",
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "isExtraImport": true,
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Windows",
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "isExtraImport": true,
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Xbox",
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "isExtraImport": true,
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Msdos",
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "isExtraImport": true,
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Msdos",
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "isExtraImport": true,
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Msx",
        "importPath": "platform_MicrosoftMsx",
        "description": "platform_MicrosoftMsx",
        "isExtraImport": true,
        "detail": "platform_MicrosoftMsx",
        "documentation": {}
    },
    {
        "label": "Platform_Windows",
        "importPath": "platform_MicrosoftWindows",
        "description": "platform_MicrosoftWindows",
        "isExtraImport": true,
        "detail": "platform_MicrosoftWindows",
        "documentation": {}
    },
    {
        "label": "Platform_Xbox",
        "importPath": "platform_MicrosoftXbox",
        "description": "platform_MicrosoftXbox",
        "isExtraImport": true,
        "detail": "platform_MicrosoftXbox",
        "documentation": {}
    },
    {
        "label": "Platform_Supergrafx",
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "isExtraImport": true,
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_3DS",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_DS",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Famicom",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_FamicomDisksystem",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Gameboy",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyAdvance",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyColor",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameCube",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_N64",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Pokemini",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_SuperFamicom",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Virtualboy",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Wii",
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "isExtraImport": true,
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_3DS",
        "importPath": "platform_Nintendo3DS",
        "description": "platform_Nintendo3DS",
        "isExtraImport": true,
        "detail": "platform_Nintendo3DS",
        "documentation": {}
    },
    {
        "label": "Platform_DS",
        "importPath": "platform_NintendoDS",
        "description": "platform_NintendoDS",
        "isExtraImport": true,
        "detail": "platform_NintendoDS",
        "documentation": {}
    },
    {
        "label": "Platform_Famicom",
        "importPath": "platform_NintendoFamicom",
        "description": "platform_NintendoFamicom",
        "isExtraImport": true,
        "detail": "platform_NintendoFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_FamicomDisksystem",
        "importPath": "platform_NintendoFamicomDisksystem",
        "description": "platform_NintendoFamicomDisksystem",
        "isExtraImport": true,
        "detail": "platform_NintendoFamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "Platform_Gameboy",
        "importPath": "platform_NintendoGameboy",
        "description": "platform_NintendoGameboy",
        "isExtraImport": true,
        "detail": "platform_NintendoGameboy",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyAdvance",
        "importPath": "platform_NintendoGameboyAdvance",
        "description": "platform_NintendoGameboyAdvance",
        "isExtraImport": true,
        "detail": "platform_NintendoGameboyAdvance",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyColor",
        "importPath": "platform_NintendoGameboyColor",
        "description": "platform_NintendoGameboyColor",
        "isExtraImport": true,
        "detail": "platform_NintendoGameboyColor",
        "documentation": {}
    },
    {
        "label": "Platform_GameCube",
        "importPath": "platform_NintendoGameCube",
        "description": "platform_NintendoGameCube",
        "isExtraImport": true,
        "detail": "platform_NintendoGameCube",
        "documentation": {}
    },
    {
        "label": "Platform_N64",
        "importPath": "platform_NintendoN64",
        "description": "platform_NintendoN64",
        "isExtraImport": true,
        "detail": "platform_NintendoN64",
        "documentation": {}
    },
    {
        "label": "Platform_Pokemini",
        "importPath": "platform_NintendoPokemini",
        "description": "platform_NintendoPokemini",
        "isExtraImport": true,
        "detail": "platform_NintendoPokemini",
        "documentation": {}
    },
    {
        "label": "Platform_SuperFamicom",
        "importPath": "platform_NintendoSuperFamicom",
        "description": "platform_NintendoSuperFamicom",
        "isExtraImport": true,
        "detail": "platform_NintendoSuperFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_Virtualboy",
        "importPath": "platform_NintendoVirtualboy",
        "description": "platform_NintendoVirtualboy",
        "isExtraImport": true,
        "detail": "platform_NintendoVirtualboy",
        "documentation": {}
    },
    {
        "label": "Platform_Wii",
        "importPath": "platform_NintendoWii",
        "description": "platform_NintendoWii",
        "isExtraImport": true,
        "detail": "platform_NintendoWii",
        "documentation": {}
    },
    {
        "label": "Platform_Palm",
        "importPath": "platform_Palm",
        "description": "platform_Palm",
        "isExtraImport": true,
        "detail": "platform_Palm",
        "documentation": {}
    },
    {
        "label": "Platform_Cdi",
        "importPath": "platform_Phillips",
        "description": "platform_Phillips",
        "isExtraImport": true,
        "detail": "platform_Phillips",
        "documentation": {}
    },
    {
        "label": "Platform_Pico8",
        "importPath": "platform_Pico8",
        "description": "platform_Pico8",
        "isExtraImport": true,
        "detail": "platform_Pico8",
        "documentation": {}
    },
    {
        "label": "Platform_32X",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Dreamcast",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_GameGear",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Vmu",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Mastersystem",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Megadrive",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Saturn",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_SG1000",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_SG1000",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Stv",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_32X",
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "isExtraImport": true,
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_32X",
        "importPath": "platform_Sega32X",
        "description": "platform_Sega32X",
        "isExtraImport": true,
        "detail": "platform_Sega32X",
        "documentation": {}
    },
    {
        "label": "Platform_Dreamcast",
        "importPath": "platform_SegaDreamcast",
        "description": "platform_SegaDreamcast",
        "isExtraImport": true,
        "detail": "platform_SegaDreamcast",
        "documentation": {}
    },
    {
        "label": "Platform_GameGear",
        "importPath": "platform_SegaGameGear",
        "description": "platform_SegaGameGear",
        "isExtraImport": true,
        "detail": "platform_SegaGameGear",
        "documentation": {}
    },
    {
        "label": "Platform_Vmu",
        "importPath": "platform_SegaVmu",
        "description": "platform_SegaVmu",
        "isExtraImport": true,
        "detail": "platform_SegaVmu",
        "documentation": {}
    },
    {
        "label": "Platform_Stv",
        "importPath": "platform_SegaStv",
        "description": "platform_SegaStv",
        "isExtraImport": true,
        "detail": "platform_SegaStv",
        "documentation": {}
    },
    {
        "label": "Platform_Mastersystem",
        "importPath": "platform_SegaMastersystem",
        "description": "platform_SegaMastersystem",
        "isExtraImport": true,
        "detail": "platform_SegaMastersystem",
        "documentation": {}
    },
    {
        "label": "Platform_Megadrive",
        "importPath": "platform_SegaMegadrive",
        "description": "platform_SegaMegadrive",
        "isExtraImport": true,
        "detail": "platform_SegaMegadrive",
        "documentation": {}
    },
    {
        "label": "Platform_Saturn",
        "importPath": "platform_SegaSaturn",
        "description": "platform_SegaSaturn",
        "isExtraImport": true,
        "detail": "platform_SegaSaturn",
        "documentation": {}
    },
    {
        "label": "Platform_SG1000",
        "importPath": "platform_SegaSG1000",
        "description": "platform_SegaSG1000",
        "isExtraImport": true,
        "detail": "platform_SegaSG1000",
        "documentation": {}
    },
    {
        "label": "Platform_Zxspectrum",
        "importPath": "platform_SinclairSpectrum",
        "description": "platform_SinclairSpectrum",
        "isExtraImport": true,
        "detail": "platform_SinclairSpectrum",
        "documentation": {}
    },
    {
        "label": "Platform_Zx81",
        "importPath": "platform_SinclairZx81",
        "description": "platform_SinclairZx81",
        "isExtraImport": true,
        "detail": "platform_SinclairZx81",
        "documentation": {}
    },
    {
        "label": "Platform_Neogeo",
        "importPath": "platform_SnkNeogeo",
        "description": "platform_SnkNeogeo",
        "isExtraImport": true,
        "detail": "platform_SnkNeogeo",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocket",
        "importPath": "platform_SnkNeogeoPocket",
        "description": "platform_SnkNeogeoPocket",
        "isExtraImport": true,
        "detail": "platform_SnkNeogeoPocket",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocketColor",
        "importPath": "platform_SnkNeogeoPocketColor",
        "description": "platform_SnkNeogeoPocketColor",
        "isExtraImport": true,
        "detail": "platform_SnkNeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "Platform_Ps2",
        "importPath": "platform_SonyPs2",
        "description": "platform_SonyPs2",
        "isExtraImport": true,
        "detail": "platform_SonyPs2",
        "documentation": {}
    },
    {
        "label": "Platform_Psp",
        "importPath": "platform_SonyPsp",
        "description": "platform_SonyPsp",
        "isExtraImport": true,
        "detail": "platform_SonyPsp",
        "documentation": {}
    },
    {
        "label": "Platform_Psx",
        "importPath": "platform_SonyPsx",
        "description": "platform_SonyPsx",
        "isExtraImport": true,
        "detail": "platform_SonyPsx",
        "documentation": {}
    },
    {
        "label": "Platform_Spectravideo",
        "importPath": "platform_Spectravideo",
        "description": "platform_Spectravideo",
        "isExtraImport": true,
        "detail": "platform_Spectravideo",
        "documentation": {}
    },
    {
        "label": "Platform_MOTO",
        "importPath": "platform_Thomson",
        "description": "platform_Thomson",
        "isExtraImport": true,
        "detail": "platform_Thomson",
        "documentation": {}
    },
    {
        "label": "Platform_Tic80",
        "importPath": "platform_Tic80",
        "description": "platform_Tic80",
        "isExtraImport": true,
        "detail": "platform_Tic80",
        "documentation": {}
    },
    {
        "label": "Platform_VideoMPV",
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "isExtraImport": true,
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "Platform_Gamemusic",
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "isExtraImport": true,
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "Platform_VideoFFMPEG",
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "isExtraImport": true,
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "Platform_3do",
        "kind": 6,
        "importPath": "platform_3do",
        "description": "platform_3do",
        "peekOfCode": "class Platform_3do(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"4do_libretro\", \"opera_libretro\"]\n    # extensions = [\"iso\", \"bin\", \"chd\", \"cue\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_3do",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_3do",
        "description": "platform_3do",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_3do(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"4do_libretro\", \"opera_libretro\"]\n    # extensions = [\"iso\", \"bin\", \"chd\", \"cue\"]",
        "detail": "platform_3do",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_3do",
        "description": "platform_3do",
        "peekOfCode": "DEBUGGING = True\nclass Platform_3do(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"4do_libretro\", \"opera_libretro\"]\n    # extensions = [\"iso\", \"bin\", \"chd\", \"cue\"]\n    def run(self):",
        "detail": "platform_3do",
        "documentation": {}
    },
    {
        "label": "Platform_Cpcplus",
        "kind": 6,
        "importPath": "platform_Amstrad",
        "description": "platform_Amstrad",
        "peekOfCode": "class Platform_Cpcplus(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"zesarux\"]\n    # cores = [\"crocods_libretro\", \"cap32_libretro\"]\n    # extensions = [\"dsk\", \"sna\", \"zip\", \"tap\", \"cdt\", \"voc\", \"cpr\", \"m3u\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Amstrad",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Amstrad",
        "description": "platform_Amstrad",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Cpcplus(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"zesarux\"]\n    # cores = [\"crocods_libretro\", \"cap32_libretro\"]\n    # extensions = [\"dsk\", \"sna\", \"zip\", \"tap\", \"cdt\", \"voc\", \"cpr\", \"m3u\"]",
        "detail": "platform_Amstrad",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Amstrad",
        "description": "platform_Amstrad",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Cpcplus(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"zesarux\"]\n    # cores = [\"crocods_libretro\", \"cap32_libretro\"]\n    # extensions = [\"dsk\", \"sna\", \"zip\", \"tap\", \"cdt\", \"voc\", \"cpr\", \"m3u\"]\n    def run(self):",
        "detail": "platform_Amstrad",
        "documentation": {}
    },
    {
        "label": "Platform_Apple",
        "kind": 6,
        "importPath": "platform_Apple",
        "description": "platform_Apple",
        "peekOfCode": "class Platform_Apple(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    # cores = [\"minivmac_libretro\"]\n    # extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Apple",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Apple",
        "description": "platform_Apple",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Apple(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    # cores = [\"minivmac_libretro\"]\n    # extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]",
        "detail": "platform_Apple",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Apple",
        "description": "platform_Apple",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Apple(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"linapple\", \"basilisk\"]\n    # cores = [\"minivmac_libretro\"]\n    # extensions = [\"dsk\", \"img\", \"zip\", \"hvf\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Apple",
        "documentation": {}
    },
    {
        "label": "Platform_Arcade",
        "kind": 6,
        "importPath": "platform_Arcade",
        "description": "platform_Arcade",
        "peekOfCode": "class Platform_Arcade(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"MAME\", \"MESS\"]\n    # cores = [\"mame_libretro\", \"mamemess_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Arcade",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Arcade",
        "description": "platform_Arcade",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Arcade(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"MAME\", \"MESS\"]\n    # cores = [\"mame_libretro\", \"mamemess_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]",
        "detail": "platform_Arcade",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Arcade",
        "description": "platform_Arcade",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Arcade(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"MAME\", \"MESS\"]\n    # cores = [\"mame_libretro\", \"mamemess_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Arcade",
        "documentation": {}
    },
    {
        "label": "Platform_Acorn",
        "kind": 6,
        "importPath": "platform_Archimedes",
        "description": "platform_Archimedes",
        "peekOfCode": "class Platform_Acorn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\", \"mame2016_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Archimedes",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Archimedes",
        "description": "platform_Archimedes",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Acorn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\", \"mame2016_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]",
        "detail": "platform_Archimedes",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Archimedes",
        "description": "platform_Archimedes",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Acorn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\", \"mame2016_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Archimedes",
        "documentation": {}
    },
    {
        "label": "Platform_Atari2600",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari5200",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_Atari5200(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'atari800']\n    # cores = ['atari800_libretro']\n    # extensions = ['zip', 'xfd', 'atr', 'cdm', 'cas',\n    #               'bin', 'a52', 'atx', 'car', 'rom', 'com', 'xex']\n    def run(self):",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari7800",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_Atari7800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'prosystem']\n    # cores = ['prosystem_libretro']\n    # extensions = ['zip', 'a78', 'bin', 'cdf']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariJaguar",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_AtariJaguar(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['virtualjaguar_libretro']\n    # extensions = ['zip', 'j64', 'jag', 'rom', 'abs', 'cof', 'bin', 'prg']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariLynx",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_AtariLynx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'mednafen']\n    # cores = ['handy_libretro', 'mednafen_lynx_libretro']\n    # extensions = ['lnx', 'o']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_AtariSTETTFalcon",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_AtariSTETTFalcon(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella', 'hatari']\n    # cores = ['hatari_libretro', 'a5200_libretro']\n    # extensions = ['st', 'msa', 'stx', 'dim', 'ipf', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atarixlxe",
        "kind": 6,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "class Platform_Atarixlxe(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['atari800_libretro']\n    # extensions = ['st', 'msa', 'zip', 'stx', 'dim', 'ipf', 'm3u', 'xex']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Atari",
        "description": "platform_Atari",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']\n    def run(self):",
        "detail": "platform_Atari",
        "documentation": {}
    },
    {
        "label": "Platform_Atari2600",
        "kind": 6,
        "importPath": "platform_Atari2600",
        "description": "platform_Atari2600",
        "peekOfCode": "class Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari2600",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Atari2600",
        "description": "platform_Atari2600",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']",
        "detail": "platform_Atari2600",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Atari2600",
        "description": "platform_Atari2600",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Atari2600(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella']\n    # cores = ['stella2014_libretro', 'stella_libretro']\n    # extensions = ['zip', 'a26', 'bin']\n    def run(self):",
        "detail": "platform_Atari2600",
        "documentation": {}
    },
    {
        "label": "Platform_Atari5200",
        "kind": 6,
        "importPath": "platform_Atari5200",
        "description": "platform_Atari5200",
        "peekOfCode": "class Platform_Atari5200(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'atari800']\n    # cores = ['atari800_libretro']\n    # extensions = ['zip', 'xfd', 'atr', 'cdm', 'cas',\n    #               'bin', 'a52', 'atx', 'car', 'rom', 'com', 'xex']\n    def run(self):",
        "detail": "platform_Atari5200",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Atari5200",
        "description": "platform_Atari5200",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Atari5200(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'atari800']\n    # cores = ['atari800_libretro']\n    # extensions = ['zip', 'xfd', 'atr', 'cdm', 'cas',",
        "detail": "platform_Atari5200",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Atari5200",
        "description": "platform_Atari5200",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Atari5200(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'atari800']\n    # cores = ['atari800_libretro']\n    # extensions = ['zip', 'xfd', 'atr', 'cdm', 'cas',\n    #               'bin', 'a52', 'atx', 'car', 'rom', 'com', 'xex']",
        "detail": "platform_Atari5200",
        "documentation": {}
    },
    {
        "label": "Platform_Atari7800",
        "kind": 6,
        "importPath": "platform_Atari7800",
        "description": "platform_Atari7800",
        "peekOfCode": "class Platform_Atari7800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'prosystem']\n    # cores = ['prosystem_libretro']\n    # extensions = ['zip', 'a78', 'bin', 'cdf']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atari7800",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Atari7800",
        "description": "platform_Atari7800",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Atari7800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'prosystem']\n    # cores = ['prosystem_libretro']\n    # extensions = ['zip', 'a78', 'bin', 'cdf']",
        "detail": "platform_Atari7800",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Atari7800",
        "description": "platform_Atari7800",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Atari7800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'prosystem']\n    # cores = ['prosystem_libretro']\n    # extensions = ['zip', 'a78', 'bin', 'cdf']\n    def run(self):",
        "detail": "platform_Atari7800",
        "documentation": {}
    },
    {
        "label": "Platform_AtariJaguar",
        "kind": 6,
        "importPath": "platform_AtariJaguar",
        "description": "platform_AtariJaguar",
        "peekOfCode": "class Platform_AtariJaguar(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['virtualjaguar_libretro']\n    # extensions = ['zip', 'j64', 'jag', 'rom', 'abs', 'cof', 'bin', 'prg']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_AtariJaguar",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_AtariJaguar",
        "description": "platform_AtariJaguar",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_AtariJaguar(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['virtualjaguar_libretro']\n    # extensions = ['zip', 'j64', 'jag', 'rom', 'abs', 'cof', 'bin', 'prg']",
        "detail": "platform_AtariJaguar",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_AtariJaguar",
        "description": "platform_AtariJaguar",
        "peekOfCode": "DEBUGGING = True\nclass Platform_AtariJaguar(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['virtualjaguar_libretro']\n    # extensions = ['zip', 'j64', 'jag', 'rom', 'abs', 'cof', 'bin', 'prg']\n    def run(self):",
        "detail": "platform_AtariJaguar",
        "documentation": {}
    },
    {
        "label": "Platform_AtariLynx",
        "kind": 6,
        "importPath": "platform_AtariLynx",
        "description": "platform_AtariLynx",
        "peekOfCode": "class Platform_AtariLynx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'mednafen']\n    cores = ['handy_libretro', 'mednafen_lynx_libretro']\n    extensions = ['lnx', 'o']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_AtariLynx",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_AtariLynx",
        "description": "platform_AtariLynx",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_AtariLynx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'mednafen']\n    cores = ['handy_libretro', 'mednafen_lynx_libretro']\n    extensions = ['lnx', 'o']",
        "detail": "platform_AtariLynx",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_AtariLynx",
        "description": "platform_AtariLynx",
        "peekOfCode": "DEBUGGING = True\nclass Platform_AtariLynx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = ['retroarch', 'mednafen']\n    cores = ['handy_libretro', 'mednafen_lynx_libretro']\n    extensions = ['lnx', 'o']\n    def run(self):",
        "detail": "platform_AtariLynx",
        "documentation": {}
    },
    {
        "label": "Platform_AtariSTETTFalcon",
        "kind": 6,
        "importPath": "platform_AtariSTETTFalcon",
        "description": "platform_AtariSTETTFalcon",
        "peekOfCode": "class Platform_AtariSTETTFalcon(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella', 'hatari']\n    # cores = ['hatari_libretro', 'a5200_libretro']\n    # extensions = ['st', 'msa', 'stx', 'dim', 'ipf', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_AtariSTETTFalcon",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_AtariSTETTFalcon",
        "description": "platform_AtariSTETTFalcon",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_AtariSTETTFalcon(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella', 'hatari']\n    # cores = ['hatari_libretro', 'a5200_libretro']\n    # extensions = ['st', 'msa', 'stx', 'dim', 'ipf', 'm3u']",
        "detail": "platform_AtariSTETTFalcon",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_AtariSTETTFalcon",
        "description": "platform_AtariSTETTFalcon",
        "peekOfCode": "DEBUGGING = True\nclass Platform_AtariSTETTFalcon(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'stella', 'hatari']\n    # cores = ['hatari_libretro', 'a5200_libretro']\n    # extensions = ['st', 'msa', 'stx', 'dim', 'ipf', 'm3u']\n    def run(self):",
        "detail": "platform_AtariSTETTFalcon",
        "documentation": {}
    },
    {
        "label": "Platform_Atarixlxe",
        "kind": 6,
        "importPath": "platform_Atarixlxe",
        "description": "platform_Atarixlxe",
        "peekOfCode": "class Platform_Atarixlxe(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['atari800_libretro']\n    # extensions = ['st', 'msa', 'zip', 'stx', 'dim', 'ipf', 'm3u', 'xex']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Atarixlxe",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Atarixlxe",
        "description": "platform_Atarixlxe",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Atarixlxe(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['atari800_libretro']\n    # extensions = ['st', 'msa', 'zip', 'stx', 'dim', 'ipf', 'm3u', 'xex']",
        "detail": "platform_Atarixlxe",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Atarixlxe",
        "description": "platform_Atarixlxe",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Atarixlxe(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['atari800_libretro']\n    # extensions = ['st', 'msa', 'zip', 'stx', 'dim', 'ipf', 'm3u', 'xex']\n    def run(self):",
        "detail": "platform_Atarixlxe",
        "documentation": {}
    },
    {
        "label": "Platform_Wonderswan",
        "kind": 6,
        "importPath": "platform_Bandai",
        "description": "platform_Bandai",
        "peekOfCode": "class Platform_Wonderswan(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mednafen\"]\n    # cores = [\"mednafen_wswan_libretro\"]\n    # extensions = [\"zip\", \"ws\", \"wsc\", \"pc2\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Bandai",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Bandai",
        "description": "platform_Bandai",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Wonderswan(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mednafen\"]\n    # cores = [\"mednafen_wswan_libretro\"]\n    # extensions = [\"zip\", \"ws\", \"wsc\", \"pc2\"]",
        "detail": "platform_Bandai",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Bandai",
        "description": "platform_Bandai",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Wonderswan(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mednafen\"]\n    # cores = [\"mednafen_wswan_libretro\"]\n    # extensions = [\"zip\", \"ws\", \"wsc\", \"pc2\"]\n    def run(self):",
        "detail": "platform_Bandai",
        "documentation": {}
    },
    {
        "label": "Platform_Coleco",
        "kind": 6,
        "importPath": "platform_Coleco",
        "description": "platform_Coleco",
        "peekOfCode": "class Platform_Coleco(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"bluemsx\", \"gearcoleco\"]\n    # cores = [\"bluemsx_libretro\", \"gearcoleco_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\", \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Coleco",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Coleco",
        "description": "platform_Coleco",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Coleco(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"bluemsx\", \"gearcoleco\"]\n    # cores = [\"bluemsx_libretro\", \"gearcoleco_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\", \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]",
        "detail": "platform_Coleco",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Coleco",
        "description": "platform_Coleco",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Coleco(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"bluemsx\", \"gearcoleco\"]\n    # cores = [\"bluemsx_libretro\", \"gearcoleco_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\", \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):",
        "detail": "platform_Coleco",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore128",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore64",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_Commodore64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = ['vice_x64sc_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82',\n    #                'd8z', 'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreAmiga",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_CommodoreAmiga(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'puae', 'fs-uae']\n    # cores = ['puae2021_libretro', 'puae_libretro',\n    #          'fsuae_libretro', 'uae4arm_libretro']\n    # floppys_ext = ['adf', 'adz', 'dms', 'fdi', 'ipf']\n    # harddrives_ext = ['hdf', 'hdz', 'datadir']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreCBMII",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_CommodoreCBMII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xcbm2_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePet",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_CommodorePet(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xpet_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePlus4",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_CommodorePlus4(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xplus4_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreVic20",
        "kind": 6,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "class Platform_CommodoreVic20(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xvic_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Commodore",
        "description": "platform_Commodore",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_Commodore",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore128",
        "kind": 6,
        "importPath": "platform_Commodore128",
        "description": "platform_Commodore128",
        "peekOfCode": "class Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore128",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Commodore128",
        "description": "platform_Commodore128",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_Commodore128",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Commodore128",
        "description": "platform_Commodore128",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Commodore128(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_x128_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_Commodore128",
        "documentation": {}
    },
    {
        "label": "Platform_Commodore64",
        "kind": 6,
        "importPath": "platform_Commodore64",
        "description": "platform_Commodore64",
        "peekOfCode": "class Platform_Commodore64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = ['vice_x64sc_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82',\n    #                'd8z', 'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_Commodore64",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Commodore64",
        "description": "platform_Commodore64",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Commodore64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = ['vice_x64sc_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82',",
        "detail": "platform_Commodore64",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Commodore64",
        "description": "platform_Commodore64",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Commodore64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = ['vice_x64sc_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82',\n    #                'd8z', 'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_Commodore64",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreAmiga",
        "kind": 6,
        "importPath": "platform_CommodoreAmiga",
        "description": "platform_CommodoreAmiga",
        "peekOfCode": "class Platform_CommodoreAmiga(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'puae', 'fs-uae']\n    # cores = ['puae2021_libretro', 'puae_libretro',\n    #          'fsuae_libretro', 'uae4arm_libretro']\n    # floppys_ext = ['adf', 'adz', 'dms', 'fdi', 'ipf']\n    # harddrives_ext = ['hdf', 'hdz', 'datadir']",
        "detail": "platform_CommodoreAmiga",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_CommodoreAmiga",
        "description": "platform_CommodoreAmiga",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_CommodoreAmiga(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'puae', 'fs-uae']\n    # cores = ['puae2021_libretro', 'puae_libretro',\n    #          'fsuae_libretro', 'uae4arm_libretro']",
        "detail": "platform_CommodoreAmiga",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_CommodoreAmiga",
        "description": "platform_CommodoreAmiga",
        "peekOfCode": "DEBUGGING = True\nclass Platform_CommodoreAmiga(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'puae', 'fs-uae']\n    # cores = ['puae2021_libretro', 'puae_libretro',\n    #          'fsuae_libretro', 'uae4arm_libretro']\n    # floppys_ext = ['adf', 'adz', 'dms', 'fdi', 'ipf']",
        "detail": "platform_CommodoreAmiga",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreCBMII",
        "kind": 6,
        "importPath": "platform_CommodoreCBMII",
        "description": "platform_CommodoreCBMII",
        "peekOfCode": "class Platform_CommodoreCBMII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xcbm2_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_CommodoreCBMII",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_CommodoreCBMII",
        "description": "platform_CommodoreCBMII",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_CommodoreCBMII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xcbm2_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_CommodoreCBMII",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_CommodoreCBMII",
        "description": "platform_CommodoreCBMII",
        "peekOfCode": "DEBUGGING = True\nclass Platform_CommodoreCBMII(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xcbm2_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_CommodoreCBMII",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePet",
        "kind": 6,
        "importPath": "platform_CommodorePet",
        "description": "platform_CommodorePet",
        "peekOfCode": "class Platform_CommodorePet(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xpet_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_CommodorePet",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_CommodorePet",
        "description": "platform_CommodorePet",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_CommodorePet(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xpet_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_CommodorePet",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_CommodorePet",
        "description": "platform_CommodorePet",
        "peekOfCode": "DEBUGGING = True\nclass Platform_CommodorePet(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xpet_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_CommodorePet",
        "documentation": {}
    },
    {
        "label": "Platform_CommodorePlus4",
        "kind": 6,
        "importPath": "platform_CommodorePlus4",
        "description": "platform_CommodorePlus4",
        "peekOfCode": "class Platform_CommodorePlus4(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xplus4_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_CommodorePlus4",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_CommodorePlus4",
        "description": "platform_CommodorePlus4",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_CommodorePlus4(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xplus4_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_CommodorePlus4",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_CommodorePlus4",
        "description": "platform_CommodorePlus4",
        "peekOfCode": "DEBUGGING = True\nclass Platform_CommodorePlus4(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xplus4_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_CommodorePlus4",
        "documentation": {}
    },
    {
        "label": "Platform_CommodoreVic20",
        "kind": 6,
        "importPath": "platform_CommodoreVic20",
        "description": "platform_CommodoreVic20",
        "peekOfCode": "class Platform_CommodoreVic20(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xvic_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']\n    # tapes_ext = ['t64', 'tap', 'tcrt']",
        "detail": "platform_CommodoreVic20",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_CommodoreVic20",
        "description": "platform_CommodoreVic20",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_CommodoreVic20(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xvic_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',",
        "detail": "platform_CommodoreVic20",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_CommodoreVic20",
        "description": "platform_CommodoreVic20",
        "peekOfCode": "DEBUGGING = True\nclass Platform_CommodoreVic20(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vice']\n    # cores = ['vice_xvic_libretro']\n    # floppys_ext = ['d64', 'd6z', 'd71', 'd7z', 'd80', 'd8z', 'd81', 'd82', 'd8z',\n    #                'g64', 'g6z', 'g41', 'g4z', 'x64', 'x6z', 'nib', 'nbz', 'd2m', 'd4m']",
        "detail": "platform_CommodoreVic20",
        "documentation": {}
    },
    {
        "label": "Platform_Pdp11",
        "kind": 6,
        "importPath": "platform_Elektronika",
        "description": "platform_Elektronika",
        "peekOfCode": "class Platform_Pdp11(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"m\"]\n    # cores = [\"bk_libretro\"]\n    # extensions = [\"bin\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Elektronika",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Elektronika",
        "description": "platform_Elektronika",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Pdp11(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"m\"]\n    # cores = [\"bk_libretro\"]\n    # extensions = [\"bin\"]",
        "detail": "platform_Elektronika",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Elektronika",
        "description": "platform_Elektronika",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Pdp11(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"m\"]\n    # cores = [\"bk_libretro\"]\n    # extensions = [\"bin\"]\n    def run(self):",
        "detail": "platform_Elektronika",
        "documentation": {}
    },
    {
        "label": "Platform_Enterprise",
        "kind": 6,
        "importPath": "platform_Enterprise",
        "description": "platform_Enterprise",
        "peekOfCode": "class Platform_Enterprise(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"ep128emu_libretro\"]\n    # extensions = [\"zip\", \"img\", \"dsk\", \"tap\", \"dtf\", \"com\",\n    #               \"trn\", \"128\", \"bas\", \"cas\", \"cdt\", \"tzx\", \".\"]\n    def run(self):",
        "detail": "platform_Enterprise",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Enterprise",
        "description": "platform_Enterprise",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Enterprise(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"ep128emu_libretro\"]\n    # extensions = [\"zip\", \"img\", \"dsk\", \"tap\", \"dtf\", \"com\",",
        "detail": "platform_Enterprise",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Enterprise",
        "description": "platform_Enterprise",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Enterprise(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"ep128emu_libretro\"]\n    # extensions = [\"zip\", \"img\", \"dsk\", \"tap\", \"dtf\", \"com\",\n    #               \"trn\", \"128\", \"bas\", \"cas\", \"cdt\", \"tzx\", \".\"]",
        "detail": "platform_Enterprise",
        "documentation": {}
    },
    {
        "label": "Platform_Channelf",
        "kind": 6,
        "importPath": "platform_Fairchild",
        "description": "platform_Fairchild",
        "peekOfCode": "class Platform_Channelf(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"freechaf\"]\n    # cores = [\"freechaf_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"chf\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Fairchild",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Fairchild",
        "description": "platform_Fairchild",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Channelf(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"freechaf\"]\n    # cores = [\"freechaf_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"chf\"]",
        "detail": "platform_Fairchild",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Fairchild",
        "description": "platform_Fairchild",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Channelf(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"freechaf\"]\n    # cores = [\"freechaf_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"chf\"]\n    def run(self):",
        "detail": "platform_Fairchild",
        "documentation": {}
    },
    {
        "label": "Platform_Vectrex",
        "kind": 6,
        "importPath": "platform_GCE",
        "description": "platform_GCE",
        "peekOfCode": "class Platform_Vectrex(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"vecx\"]\n    # cores = [\"vecx_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"vec\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_GCE",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_GCE",
        "description": "platform_GCE",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Vectrex(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"vecx\"]\n    # cores = [\"vecx_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"vec\"]",
        "detail": "platform_GCE",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_GCE",
        "description": "platform_GCE",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Vectrex(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"vecx\"]\n    # cores = [\"vecx_libretro\"]\n    # extensions = [\"zip\", \"bin\", \"vec\"]\n    def run(self):",
        "detail": "platform_GCE",
        "documentation": {}
    },
    {
        "label": "Platform_GP32",
        "kind": 6,
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "peekOfCode": "class Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "Platform_GP2X",
        "kind": 6,
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "peekOfCode": "class Platform_GP2X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]",
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Gamepark",
        "description": "platform_Gamepark",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Gamepark",
        "documentation": {}
    },
    {
        "label": "Platform_GP2X",
        "kind": 6,
        "importPath": "platform_Gamepark2X",
        "description": "platform_Gamepark2X",
        "peekOfCode": "class Platform_GP2X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_Gamepark2X",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Gamepark2X",
        "description": "platform_Gamepark2X",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GP2X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]",
        "detail": "platform_Gamepark2X",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Gamepark2X",
        "description": "platform_Gamepark2X",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GP2X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"other\"]\n    cores = [\"mame_libretro\"]\n    extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Gamepark2X",
        "documentation": {}
    },
    {
        "label": "Platform_GP32",
        "kind": 6,
        "importPath": "platform_Gamepark32",
        "description": "platform_Gamepark32",
        "peekOfCode": "class Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Gamepark32",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Gamepark32",
        "description": "platform_Gamepark32",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]",
        "detail": "platform_Gamepark32",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Gamepark32",
        "description": "platform_Gamepark32",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GP32(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mame_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"7z\", \"cmd\"]\n    def run(self):",
        "detail": "platform_Gamepark32",
        "documentation": {}
    },
    {
        "label": "Platform_Java",
        "kind": 6,
        "importPath": "platform_Java",
        "description": "platform_Java",
        "peekOfCode": "class Platform_Java(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"squirreljme_libretro\"]\n    # extensions = [\"zip\", \"jar\", \"sqc\", \"jam\", \"jad\", \"kjx\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Java",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Java",
        "description": "platform_Java",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Java(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"squirreljme_libretro\"]\n    # extensions = [\"zip\", \"jar\", \"sqc\", \"jam\", \"jad\", \"kjx\"]",
        "detail": "platform_Java",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Java",
        "description": "platform_Java",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Java(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"squirreljme_libretro\"]\n    # extensions = [\"zip\", \"jar\", \"sqc\", \"jam\", \"jad\", \"kjx\"]\n    def run(self):",
        "detail": "platform_Java",
        "documentation": {}
    },
    {
        "label": "Platform_Linux",
        "kind": 6,
        "importPath": "platform_Linux",
        "description": "platform_Linux",
        "peekOfCode": "class Platform_Linux(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"linux\"]\n    # cores = [\"linux\"]\n    # extensions = [\"elf\", \"exe\"]\n    def run(self):\n        emulator = [\"bash\"]",
        "detail": "platform_Linux",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Linux",
        "description": "platform_Linux",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Linux(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"linux\"]\n    # cores = [\"linux\"]\n    # extensions = [\"elf\", \"exe\"]",
        "detail": "platform_Linux",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Linux",
        "description": "platform_Linux",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Linux(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"linux\"]\n    # cores = [\"linux\"]\n    # extensions = [\"elf\", \"exe\"]\n    def run(self):",
        "detail": "platform_Linux",
        "documentation": {}
    },
    {
        "label": "Platform_Odyssey",
        "kind": 6,
        "importPath": "platform_Magnavox",
        "description": "platform_Magnavox",
        "peekOfCode": "class Platform_Odyssey(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"o2em_libretro\"]\n    # extensions = [\"zip\", \"bin\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Magnavox",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Magnavox",
        "description": "platform_Magnavox",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Odyssey(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"o2em_libretro\"]\n    # extensions = [\"zip\", \"bin\"]",
        "detail": "platform_Magnavox",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Magnavox",
        "description": "platform_Magnavox",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Odyssey(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"o2em_libretro\"]\n    # extensions = [\"zip\", \"bin\"]\n    def run(self):",
        "detail": "platform_Magnavox",
        "documentation": {}
    },
    {
        "label": "Platform_Intellivision",
        "kind": 6,
        "importPath": "platform_Mattel",
        "description": "platform_Mattel",
        "peekOfCode": "class Platform_Intellivision(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"freeintv_libretro\", \"jzintv\", \"jzintv-ecs\"]\n    # extensions = [\"int\", \"bin\", \"rom\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Mattel",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Mattel",
        "description": "platform_Mattel",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Intellivision(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"freeintv_libretro\", \"jzintv\", \"jzintv-ecs\"]\n    # extensions = [\"int\", \"bin\", \"rom\"]",
        "detail": "platform_Mattel",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Mattel",
        "description": "platform_Mattel",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Intellivision(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"freeintv_libretro\", \"jzintv\", \"jzintv-ecs\"]\n    # extensions = [\"int\", \"bin\", \"rom\"]\n    def run(self):",
        "detail": "platform_Mattel",
        "documentation": {}
    },
    {
        "label": "Platform_Msx",
        "kind": 6,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "class Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Windows",
        "kind": 6,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "class Platform_Windows(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"wine\", \"other\"]\n    # cores = [\"wine\"]\n    # extensions = [\"exe\"]\n    # wineprefix = self.showetdir + '/wineprefix'\n    def run(self):",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Xbox",
        "kind": 6,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "class Platform_Xbox(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"directxbox_libretro\"]\n    # extensions = [\"zip\", \"iso\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Msdos",
        "kind": 6,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "class Platform_Msdos(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"dosbox\"]\n    # cores = [\"dosbox_core_libretro\", \"dosbox_pure_libretro\",\n    #          \"dosbox_svn_libretro\", \"dosbox_svn_ce_libretro\"]\n    # extensions = [\"zip\", \"dosz\", \"exe\", \"com\", \"bat\", \"iso\", \"cue\",\n    #               \"ins\", \"img\", \"ima\", \"vhd\", \"jrc\", \"tc\", \"m3u\", \"m3u8\"]",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Microsoft",
        "description": "platform_Microsoft",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):",
        "detail": "platform_Microsoft",
        "documentation": {}
    },
    {
        "label": "Platform_Msdos",
        "kind": 6,
        "importPath": "platform_MicrosoftMsdos",
        "description": "platform_MicrosoftMsdos",
        "peekOfCode": "class Platform_Msdos(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"dosbox\"]\n    # cores = [\"dosbox_core_libretro\", \"dosbox_pure_libretro\",\n    #          \"dosbox_svn_libretro\", \"dosbox_svn_ce_libretro\"]\n    # extensions = [\"zip\", \"dosz\", \"exe\", \"com\", \"bat\", \"iso\", \"cue\",\n    #               \"ins\", \"img\", \"ima\", \"vhd\", \"jrc\", \"tc\", \"m3u\", \"m3u8\"]",
        "detail": "platform_MicrosoftMsdos",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_MicrosoftMsdos",
        "description": "platform_MicrosoftMsdos",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Msdos(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"dosbox\"]\n    # cores = [\"dosbox_core_libretro\", \"dosbox_pure_libretro\",\n    #          \"dosbox_svn_libretro\", \"dosbox_svn_ce_libretro\"]",
        "detail": "platform_MicrosoftMsdos",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_MicrosoftMsdos",
        "description": "platform_MicrosoftMsdos",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Msdos(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"dosbox\"]\n    # cores = [\"dosbox_core_libretro\", \"dosbox_pure_libretro\",\n    #          \"dosbox_svn_libretro\", \"dosbox_svn_ce_libretro\"]\n    # extensions = [\"zip\", \"dosz\", \"exe\", \"com\", \"bat\", \"iso\", \"cue\",",
        "detail": "platform_MicrosoftMsdos",
        "documentation": {}
    },
    {
        "label": "Platform_Msx",
        "kind": 6,
        "importPath": "platform_MicrosoftMsx",
        "description": "platform_MicrosoftMsx",
        "peekOfCode": "class Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_MicrosoftMsx",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_MicrosoftMsx",
        "description": "platform_MicrosoftMsx",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]",
        "detail": "platform_MicrosoftMsx",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_MicrosoftMsx",
        "description": "platform_MicrosoftMsx",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Msx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"openmsx\", \"openmsx-msx2\", \"openmsx-msx2-plus\", \"openmsx-msx-turbo\",]    cores = [\"bluemsx_libretro\", \"fbneo_msx_libretro\", \"fmsx_libretro\"]\n    # extensions = [\"rom\", \"ri\", \"mx1\", \"mx2\",\n    #               \"col\", \"dsk\", \"cas\", \"sg\", \"sc\", \"m3u\"]\n    def run(self):",
        "detail": "platform_MicrosoftMsx",
        "documentation": {}
    },
    {
        "label": "Platform_Windows",
        "kind": 6,
        "importPath": "platform_MicrosoftWindows",
        "description": "platform_MicrosoftWindows",
        "peekOfCode": "class Platform_Windows(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"wine\", \"other\"]\n    # cores = [\"wine\"]\n    # extensions = [\"exe\"]\n    # wineprefix = self.showetdir + '/wineprefix'\n    def run(self):",
        "detail": "platform_MicrosoftWindows",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_MicrosoftWindows",
        "description": "platform_MicrosoftWindows",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Windows(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"wine\", \"other\"]\n    # cores = [\"wine\"]\n    # extensions = [\"exe\"]",
        "detail": "platform_MicrosoftWindows",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_MicrosoftWindows",
        "description": "platform_MicrosoftWindows",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Windows(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"wine\", \"other\"]\n    # cores = [\"wine\"]\n    # extensions = [\"exe\"]\n    # wineprefix = self.showetdir + '/wineprefix'",
        "detail": "platform_MicrosoftWindows",
        "documentation": {}
    },
    {
        "label": "Platform_Xbox",
        "kind": 6,
        "importPath": "platform_MicrosoftXbox",
        "description": "platform_MicrosoftXbox",
        "peekOfCode": "class Platform_Xbox(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"directxbox_libretro\"]\n    # extensions = [\"zip\", \"iso\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_MicrosoftXbox",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_MicrosoftXbox",
        "description": "platform_MicrosoftXbox",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Xbox(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"directxbox_libretro\"]\n    # extensions = [\"zip\", \"iso\"]",
        "detail": "platform_MicrosoftXbox",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_MicrosoftXbox",
        "description": "platform_MicrosoftXbox",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Xbox(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"directxbox_libretro\"]\n    # extensions = [\"zip\", \"iso\"]\n    def run(self):",
        "detail": "platform_MicrosoftXbox",
        "documentation": {}
    },
    {
        "label": "Platform_Pcengine",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Pcengine(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n    #     \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\"]\n    # extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_Supergrafx",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Supergrafx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n    #          \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\",]\n    # extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_Pc8000",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Pc8000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"quasi88_libretro\"]\n    # extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_Pc8800",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Pc8800(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"quasi88_libretro\"]\n    # extensions = [\"d88\", \"u88\", \"m3u\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_Pc98",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Pc98(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"nekop2_libretro\"]\n    # extensions = [\"d98\", \"zip\", \"98d\", \"fdi\", \"fdd\", \"2hd\", \"tfd\", \"d88\",\n    #               \"88d\", \"hdm\", \"xdf\", \"dup\", \"cmd\", \"hdi\", \"thd\", \"nhd\", \"hdd\"]\n    def run(self):",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_Pcfx",
        "kind": 6,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "class Platform_Pcfx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_pcfx_libretro\"]\n    # extensions = [\"cue\", \"ccd\", \"toc\", \"chd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Pcengine(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n    #     \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\"]",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Nec",
        "description": "platform_Nec",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Pcengine(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_supergrafx_libretro\", \"mednafen_pce_fast_libretro\",\n    #     \"fbneo_pce_libretro\", \"fbneo_sgx_libretro\", \"fbneo_tg_libretro\"]\n    # extensions = [\"zip\", \"pce\", \"sgx\", \"cue\", \"ccd\", \"chd\"]",
        "detail": "platform_Nec",
        "documentation": {}
    },
    {
        "label": "Platform_3DS",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]\n    # extensions = [\"3ds\", \"3dsx\", \"elf\", \"axf\", \"cci\", \"cxi\", \"app\"]\n    def run(self):",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_N64",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_N64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mupen64plus-glide64\",\n    #              \"mupen64plus-glide64-lle\", \"mupen64plus-gliden64\"]\n    # cores = [\"mupen64plus_libretro\",\n    #          \"mupen64plus_next_libretro\", \"parallel_n46_libretro\"]\n    # extensions = [\"n64\", \"v64\", \"z64\", \"bin\", \"u1\", \"ndd\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_DS",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"desmume\", \"melonds\"]\n    cores = [\"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\"]\n    extensions = [\"zip\", \"nds\", \"dsi\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Famicom",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_Famicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    # extensions = [\"zip\", \"nes\", \"fds\", \"unf\", \"unif\", \"qd\", \"nsf\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_FamicomDisksystem",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_FamicomDisksystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    # extensions = [\"zip\", \"nes\", \"fds\", \"unf\", \"unif\", \"qd\", \"nsf\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Gameboy",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_Gameboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mess2016_libretro\",\n    #          \"mess_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"dmg\", \"bin\", \"u1\", \"ndd\", \"zip\"]\n    def run(self):",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyColor",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_GameboyColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gbc\", \"dmg\", \"bin\", \"u1\", \"ndd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyAdvance",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_GameboyAdvance(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"meteor_libretro\", \"vba_next_libretro\",\n    #          \"vbam_libretro\", \"mgba_libretro\", \"gpsp_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"gbc\", \"gba\", \"dmg\", \"agb\", \"bin\", \"cgb\", \"sgb\"]\n    def run(self):",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_GameCube",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_GameCube(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Pokemini",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_Pokemini(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"pokemini_libretro\"]\n    # extensions = [\"zip\", \"min\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_SuperFamicom",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_SuperFamicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"snes9x_libretro\"]\n    # extensions = [\"zip\", \"sfc\", \"smc\", \"fig\", \"swc\", \"bs\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Virtualboy",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_Virtualboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_vb_libretro\"]\n    # extensions = [\"zip\", \"vb\", \"vboy\", \"bin\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_Wii",
        "kind": 6,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "class Platform_Wii(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Nintendo",
        "description": "platform_Nintendo",
        "peekOfCode": "DEBUGGING = True\nclass Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]\n    # extensions = [\"3ds\", \"3dsx\", \"elf\", \"axf\", \"cci\", \"cxi\", \"app\"]",
        "detail": "platform_Nintendo",
        "documentation": {}
    },
    {
        "label": "Platform_3DS",
        "kind": 6,
        "importPath": "platform_Nintendo3DS",
        "description": "platform_Nintendo3DS",
        "peekOfCode": "class Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]\n    # extensions = [\"3ds\", \"3dsx\", \"elf\", \"axf\", \"cci\", \"cxi\", \"app\"]\n    def run(self):",
        "detail": "platform_Nintendo3DS",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Nintendo3DS",
        "description": "platform_Nintendo3DS",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]",
        "detail": "platform_Nintendo3DS",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Nintendo3DS",
        "description": "platform_Nintendo3DS",
        "peekOfCode": "DEBUGGING = True\nclass Platform_3DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"citra\"]\n    # cores = [\"citra_libretro\", \"citra2018_libretro\", \"citra_canary_libretro\",\n    #          \"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\",]\n    # extensions = [\"3ds\", \"3dsx\", \"elf\", \"axf\", \"cci\", \"cxi\", \"app\"]",
        "detail": "platform_Nintendo3DS",
        "documentation": {}
    },
    {
        "label": "Platform_DS",
        "kind": 6,
        "importPath": "platform_NintendoDS",
        "description": "platform_NintendoDS",
        "peekOfCode": "class Platform_DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"desmume\", \"melonds\"]\n    cores = [\"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\"]\n    extensions = [\"zip\", \"nds\", \"dsi\"]\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_NintendoDS",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoDS",
        "description": "platform_NintendoDS",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"desmume\", \"melonds\"]\n    cores = [\"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\"]\n    extensions = [\"zip\", \"nds\", \"dsi\"]",
        "detail": "platform_NintendoDS",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoDS",
        "description": "platform_NintendoDS",
        "peekOfCode": "DEBUGGING = True\nclass Platform_DS(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    emulators = [\"retroarch\", \"desmume\", \"melonds\"]\n    cores = [\"melonds_libretro\", \"desmume_libretro\", \"desmume2015_libretro\"]\n    extensions = [\"zip\", \"nds\", \"dsi\"]\n    def run(self):",
        "detail": "platform_NintendoDS",
        "documentation": {}
    },
    {
        "label": "Platform_Famicom",
        "kind": 6,
        "importPath": "platform_NintendoFamicom",
        "description": "platform_NintendoFamicom",
        "peekOfCode": "class Platform_Famicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    # extensions = [\"zip\", \"nes\", \"fds\", \"unf\", \"unif\", \"qd\", \"nsf\"]",
        "detail": "platform_NintendoFamicom",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoFamicom",
        "description": "platform_NintendoFamicom",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Famicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",",
        "detail": "platform_NintendoFamicom",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoFamicom",
        "description": "platform_NintendoFamicom",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Famicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]",
        "detail": "platform_NintendoFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_FamicomDisksystem",
        "kind": 6,
        "importPath": "platform_NintendoFamicomDisksystem",
        "description": "platform_NintendoFamicomDisksystem",
        "peekOfCode": "class Platform_FamicomDisksystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]\n    # extensions = [\"zip\", \"nes\", \"fds\", \"unf\", \"unif\", \"qd\", \"nsf\"]",
        "detail": "platform_NintendoFamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoFamicomDisksystem",
        "description": "platform_NintendoFamicomDisksystem",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_FamicomDisksystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",",
        "detail": "platform_NintendoFamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoFamicomDisksystem",
        "description": "platform_NintendoFamicomDisksystem",
        "peekOfCode": "DEBUGGING = True\nclass Platform_FamicomDisksystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"higan\", \"emux\",\n    #              \"fceumm\", \"nestopia\", \"quicknes\", \"mesen\"]\n    # cores = [\"quicknes_libretro\", \"nestopia_libretro\", \"mess_libretro\", \"mess2016_libretro\",\n    #          \"mesen_libretro\", \"fceumm_libretro\", \"fceumm_mod_libretro\", \"fbneo_nes_libretro\"]",
        "detail": "platform_NintendoFamicomDisksystem",
        "documentation": {}
    },
    {
        "label": "Platform_GameCube",
        "kind": 6,
        "importPath": "platform_NintendoGameCube",
        "description": "platform_NintendoGameCube",
        "peekOfCode": "class Platform_GameCube(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "platform_NintendoGameCube",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoGameCube",
        "description": "platform_NintendoGameCube",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GameCube(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",",
        "detail": "platform_NintendoGameCube",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoGameCube",
        "description": "platform_NintendoGameCube",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GameCube(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]",
        "detail": "platform_NintendoGameCube",
        "documentation": {}
    },
    {
        "label": "Platform_Gameboy",
        "kind": 6,
        "importPath": "platform_NintendoGameboy",
        "description": "platform_NintendoGameboy",
        "peekOfCode": "class Platform_Gameboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mess2016_libretro\",\n    #          \"mess_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"dmg\", \"bin\", \"u1\", \"ndd\", \"zip\"]\n    def run(self):",
        "detail": "platform_NintendoGameboy",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoGameboy",
        "description": "platform_NintendoGameboy",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Gameboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mess2016_libretro\",\n    #          \"mess_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]",
        "detail": "platform_NintendoGameboy",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoGameboy",
        "description": "platform_NintendoGameboy",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Gameboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mess2016_libretro\",\n    #          \"mess_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"dmg\", \"bin\", \"u1\", \"ndd\", \"zip\"]",
        "detail": "platform_NintendoGameboy",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyAdvance",
        "kind": 6,
        "importPath": "platform_NintendoGameboyAdvance",
        "description": "platform_NintendoGameboyAdvance",
        "peekOfCode": "class Platform_GameboyAdvance(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"meteor_libretro\", \"vba_next_libretro\",\n    #          \"vbam_libretro\", \"mgba_libretro\", \"gpsp_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"gbc\", \"gba\", \"dmg\", \"agb\", \"bin\", \"cgb\", \"sgb\"]\n    def run(self):",
        "detail": "platform_NintendoGameboyAdvance",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoGameboyAdvance",
        "description": "platform_NintendoGameboyAdvance",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GameboyAdvance(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"meteor_libretro\", \"vba_next_libretro\",\n    #          \"vbam_libretro\", \"mgba_libretro\", \"gpsp_libretro\"]",
        "detail": "platform_NintendoGameboyAdvance",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoGameboyAdvance",
        "description": "platform_NintendoGameboyAdvance",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GameboyAdvance(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"meteor_libretro\", \"vba_next_libretro\",\n    #          \"vbam_libretro\", \"mgba_libretro\", \"gpsp_libretro\"]\n    # extensions = [\"zip\", \"gb\", \"gbc\", \"gba\", \"dmg\", \"agb\", \"bin\", \"cgb\", \"sgb\"]",
        "detail": "platform_NintendoGameboyAdvance",
        "documentation": {}
    },
    {
        "label": "Platform_GameboyColor",
        "kind": 6,
        "importPath": "platform_NintendoGameboyColor",
        "description": "platform_NintendoGameboyColor",
        "peekOfCode": "class Platform_GameboyColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gbc\", \"dmg\", \"bin\", \"u1\", \"ndd\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_NintendoGameboyColor",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoGameboyColor",
        "description": "platform_NintendoGameboyColor",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GameboyColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gbc\", \"dmg\", \"bin\", \"u1\", \"ndd\"]",
        "detail": "platform_NintendoGameboyColor",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoGameboyColor",
        "description": "platform_NintendoGameboyColor",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GameboyColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"gambatte_libretro\", \"mgba_libretro\", \"tgbdual_libretro\"]\n    # extensions = [\"zip\", \"gbc\", \"dmg\", \"bin\", \"u1\", \"ndd\"]\n    def run(self):",
        "detail": "platform_NintendoGameboyColor",
        "documentation": {}
    },
    {
        "label": "Platform_N64",
        "kind": 6,
        "importPath": "platform_NintendoN64",
        "description": "platform_NintendoN64",
        "peekOfCode": "class Platform_N64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mupen64plus-glide64\",\n    #              \"mupen64plus-glide64-lle\", \"mupen64plus-gliden64\"]\n    # cores = [\"mupen64plus_libretro\",\n    #          \"mupen64plus_next_libretro\", \"parallel_n46_libretro\"]\n    # extensions = [\"n64\", \"v64\", \"z64\", \"bin\", \"u1\", \"ndd\"]",
        "detail": "platform_NintendoN64",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoN64",
        "description": "platform_NintendoN64",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_N64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mupen64plus-glide64\",\n    #              \"mupen64plus-glide64-lle\", \"mupen64plus-gliden64\"]\n    # cores = [\"mupen64plus_libretro\",",
        "detail": "platform_NintendoN64",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoN64",
        "description": "platform_NintendoN64",
        "peekOfCode": "DEBUGGING = True\nclass Platform_N64(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"mupen64plus-glide64\",\n    #              \"mupen64plus-glide64-lle\", \"mupen64plus-gliden64\"]\n    # cores = [\"mupen64plus_libretro\",\n    #          \"mupen64plus_next_libretro\", \"parallel_n46_libretro\"]",
        "detail": "platform_NintendoN64",
        "documentation": {}
    },
    {
        "label": "Platform_Pokemini",
        "kind": 6,
        "importPath": "platform_NintendoPokemini",
        "description": "platform_NintendoPokemini",
        "peekOfCode": "class Platform_Pokemini(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"pokemini_libretro\"]\n    # extensions = [\"zip\", \"min\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_NintendoPokemini",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoPokemini",
        "description": "platform_NintendoPokemini",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Pokemini(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"pokemini_libretro\"]\n    # extensions = [\"zip\", \"min\"]",
        "detail": "platform_NintendoPokemini",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoPokemini",
        "description": "platform_NintendoPokemini",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Pokemini(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"pokemini_libretro\"]\n    # extensions = [\"zip\", \"min\"]\n    def run(self):",
        "detail": "platform_NintendoPokemini",
        "documentation": {}
    },
    {
        "label": "Platform_SuperFamicom",
        "kind": 6,
        "importPath": "platform_NintendoSuperFamicom",
        "description": "platform_NintendoSuperFamicom",
        "peekOfCode": "class Platform_SuperFamicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"snes9x_libretro\"]\n    # extensions = [\"zip\", \"sfc\", \"smc\", \"fig\", \"swc\", \"bs\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_NintendoSuperFamicom",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoSuperFamicom",
        "description": "platform_NintendoSuperFamicom",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_SuperFamicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"snes9x_libretro\"]\n    # extensions = [\"zip\", \"sfc\", \"smc\", \"fig\", \"swc\", \"bs\"]",
        "detail": "platform_NintendoSuperFamicom",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoSuperFamicom",
        "description": "platform_NintendoSuperFamicom",
        "peekOfCode": "DEBUGGING = True\nclass Platform_SuperFamicom(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"snes9x_libretro\"]\n    # extensions = [\"zip\", \"sfc\", \"smc\", \"fig\", \"swc\", \"bs\"]\n    def run(self):",
        "detail": "platform_NintendoSuperFamicom",
        "documentation": {}
    },
    {
        "label": "Platform_Virtualboy",
        "kind": 6,
        "importPath": "platform_NintendoVirtualboy",
        "description": "platform_NintendoVirtualboy",
        "peekOfCode": "class Platform_Virtualboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_vb_libretro\"]\n    # extensions = [\"zip\", \"vb\", \"vboy\", \"bin\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_NintendoVirtualboy",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoVirtualboy",
        "description": "platform_NintendoVirtualboy",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Virtualboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_vb_libretro\"]\n    # extensions = [\"zip\", \"vb\", \"vboy\", \"bin\"]",
        "detail": "platform_NintendoVirtualboy",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoVirtualboy",
        "description": "platform_NintendoVirtualboy",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Virtualboy(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"mednafen_vb_libretro\"]\n    # extensions = [\"zip\", \"vb\", \"vboy\", \"bin\"]\n    def run(self):",
        "detail": "platform_NintendoVirtualboy",
        "documentation": {}
    },
    {
        "label": "Platform_Wii",
        "kind": 6,
        "importPath": "platform_NintendoWii",
        "description": "platform_NintendoWii",
        "peekOfCode": "class Platform_Wii(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]\n    def run(self):",
        "detail": "platform_NintendoWii",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_NintendoWii",
        "description": "platform_NintendoWii",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Wii(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",",
        "detail": "platform_NintendoWii",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_NintendoWii",
        "description": "platform_NintendoWii",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Wii(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"dolphin_libretro\"]\n    # extensions = [\"gcm\", \"iso\", \"wbfs\", \"ciso\", \"gcz\",\n    #               \"elf\", \"dol\", \"dff\", \"tgc\", \"wad\", \"rvz\", \"m3u\"]",
        "detail": "platform_NintendoWii",
        "documentation": {}
    },
    {
        "label": "Platform_Palm",
        "kind": 6,
        "importPath": "platform_Palm",
        "description": "platform_Palm",
        "peekOfCode": "class Platform_Palm(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mu_libretro']\n    # extensions = ['prc', 'pqa', 'img', 'pdb', 'zip']\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_Palm",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Palm",
        "description": "platform_Palm",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Palm(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mu_libretro']\n    # extensions = ['prc', 'pqa', 'img', 'pdb', 'zip']",
        "detail": "platform_Palm",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Palm",
        "description": "platform_Palm",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Palm(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mu_libretro']\n    # extensions = ['prc', 'pqa', 'img', 'pdb', 'zip']\n    def run(self):",
        "detail": "platform_Palm",
        "documentation": {}
    },
    {
        "label": "Platform_Cdi",
        "kind": 6,
        "importPath": "platform_Phillips",
        "description": "platform_Phillips",
        "peekOfCode": "class Platform_Cdi(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"samecdi_libretro\", \"cdi2015_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"iso\"]\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_Phillips",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Phillips",
        "description": "platform_Phillips",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Cdi(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"samecdi_libretro\", \"cdi2015_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"iso\"]",
        "detail": "platform_Phillips",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Phillips",
        "description": "platform_Phillips",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Cdi(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"samecdi_libretro\", \"cdi2015_libretro\"]\n    # extensions = [\"zip\", \"chd\", \"iso\"]\n    def run(self):",
        "detail": "platform_Phillips",
        "documentation": {}
    },
    {
        "label": "Platform_Pico8",
        "kind": 6,
        "importPath": "platform_Pico8",
        "description": "platform_Pico8",
        "peekOfCode": "class Platform_Pico8(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"retro8_libretro\"]\n    # extensions = [\"zip\", \"p8\", \"png\"]\n    def run(self):\n        # Set up the emulator we want to run.",
        "detail": "platform_Pico8",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Pico8",
        "description": "platform_Pico8",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Pico8(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"retro8_libretro\"]\n    # extensions = [\"zip\", \"p8\", \"png\"]",
        "detail": "platform_Pico8",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Pico8",
        "description": "platform_Pico8",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Pico8(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"other\"]\n    # cores = [\"retro8_libretro\"]\n    # extensions = [\"zip\", \"p8\", \"png\"]\n    def run(self):",
        "detail": "platform_Pico8",
        "documentation": {}
    },
    {
        "label": "Platform_32X",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Dreamcast",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Dreamcast(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'flycast', 'redream']\n    # cores = ['flycast_libretro', 'flycast_gles2_libretro', 'retrodream_libretro']\n    # extensions = ['chd', 'cdi', 'elf', 'bin', 'cue',\n    # \t\t\t  'gdi', 'lst', 'zip', 'dat', '7z', 'm3u']\n    def run(self):",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_GameGear",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_GameGear(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['gearsystem_libretro',\n    #          'genesis_plus_gx_libretro', 'fbneo_gg_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Mastersystem",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Mastersystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['genesis_plus_gx_libretro', 'fbneo_sms_libretro',\n    #          'gearsystem_libretro', 'picodrive_libretro', 'smsplus_gx_libreto']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n    #               'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Megadrive",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Megadrive(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'dgen']\n    # cores = ['genesis_plus_gx_libretro',\n    #          'fbneo_md_libretro', 'picodrive_libretro']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n    #               'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Saturn",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Saturn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Stv",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Stv(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'ccd', 'chd', 'cue', 'iso', 'mds', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_Vmu",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_Vmu(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vemulator']\n    # cores = ['vemulator_libretro']\n    # extensions = ['zip', 'vms', 'dci', 'bin']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_SG1000",
        "kind": 6,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "class Platform_SG1000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'gearsystem']\n    # cores = ['gearsystem_libretro', 'bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',\n    #               'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']\n    def run(self):",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Sega",
        "description": "platform_Sega",
        "peekOfCode": "DEBUGGING = True\nclass Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']\n    def run(self):",
        "detail": "platform_Sega",
        "documentation": {}
    },
    {
        "label": "Platform_32X",
        "kind": 6,
        "importPath": "platform_Sega32X",
        "description": "platform_Sega32X",
        "peekOfCode": "class Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sega32X",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Sega32X",
        "description": "platform_Sega32X",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']",
        "detail": "platform_Sega32X",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Sega32X",
        "description": "platform_Sega32X",
        "peekOfCode": "DEBUGGING = True\nclass Platform_32X(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'picodrive']\n    # cores = ['picodrive_libretro', 'blastem_libretro']\n    # extensions = ['zip', 'bin', 'gen', 'gg', 'smd', 'pco', 'md', '32x', 'chd', 'cue', 'iso', 'sms', '68k', 'sgd', 'm3u']\n    def run(self):",
        "detail": "platform_Sega32X",
        "documentation": {}
    },
    {
        "label": "Platform_Dreamcast",
        "kind": 6,
        "importPath": "platform_SegaDreamcast",
        "description": "platform_SegaDreamcast",
        "peekOfCode": "class Platform_Dreamcast(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'flycast', 'redream']\n    # cores = ['flycast_libretro', 'flycast_gles2_libretro', 'retrodream_libretro']\n    # extensions = ['chd', 'cdi', 'elf', 'bin', 'cue',\n    # \t\t\t  'gdi', 'lst', 'zip', 'dat', '7z', 'm3u']\n    def run(self):",
        "detail": "platform_SegaDreamcast",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaDreamcast",
        "description": "platform_SegaDreamcast",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Dreamcast(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'flycast', 'redream']\n    # cores = ['flycast_libretro', 'flycast_gles2_libretro', 'retrodream_libretro']\n    # extensions = ['chd', 'cdi', 'elf', 'bin', 'cue',",
        "detail": "platform_SegaDreamcast",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaDreamcast",
        "description": "platform_SegaDreamcast",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Dreamcast(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'flycast', 'redream']\n    # cores = ['flycast_libretro', 'flycast_gles2_libretro', 'retrodream_libretro']\n    # extensions = ['chd', 'cdi', 'elf', 'bin', 'cue',\n    # \t\t\t  'gdi', 'lst', 'zip', 'dat', '7z', 'm3u']",
        "detail": "platform_SegaDreamcast",
        "documentation": {}
    },
    {
        "label": "Platform_GameGear",
        "kind": 6,
        "importPath": "platform_SegaGameGear",
        "description": "platform_SegaGameGear",
        "peekOfCode": "class Platform_GameGear(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['gearsystem_libretro',\n    #          'genesis_plus_gx_libretro', 'fbneo_gg_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):",
        "detail": "platform_SegaGameGear",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaGameGear",
        "description": "platform_SegaGameGear",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_GameGear(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['gearsystem_libretro',\n    #          'genesis_plus_gx_libretro', 'fbneo_gg_libretro']",
        "detail": "platform_SegaGameGear",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaGameGear",
        "description": "platform_SegaGameGear",
        "peekOfCode": "DEBUGGING = True\nclass Platform_GameGear(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['gearsystem_libretro',\n    #          'genesis_plus_gx_libretro', 'fbneo_gg_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']",
        "detail": "platform_SegaGameGear",
        "documentation": {}
    },
    {
        "label": "Platform_Mastersystem",
        "kind": 6,
        "importPath": "platform_SegaMastersystem",
        "description": "platform_SegaMastersystem",
        "peekOfCode": "class Platform_Mastersystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['genesis_plus_gx_libretro', 'fbneo_sms_libretro',\n    #          'gearsystem_libretro', 'picodrive_libretro', 'smsplus_gx_libreto']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n    #               'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "platform_SegaMastersystem",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaMastersystem",
        "description": "platform_SegaMastersystem",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Mastersystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['genesis_plus_gx_libretro', 'fbneo_sms_libretro',\n    #          'gearsystem_libretro', 'picodrive_libretro', 'smsplus_gx_libreto']",
        "detail": "platform_SegaMastersystem",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaMastersystem",
        "description": "platform_SegaMastersystem",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Mastersystem(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'osmose']\n    # cores = ['genesis_plus_gx_libretro', 'fbneo_sms_libretro',\n    #          'gearsystem_libretro', 'picodrive_libretro', 'smsplus_gx_libreto']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',",
        "detail": "platform_SegaMastersystem",
        "documentation": {}
    },
    {
        "label": "Platform_Megadrive",
        "kind": 6,
        "importPath": "platform_SegaMegadrive",
        "description": "platform_SegaMegadrive",
        "peekOfCode": "class Platform_Megadrive(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'dgen']\n    # cores = ['genesis_plus_gx_libretro',\n    #          'fbneo_md_libretro', 'picodrive_libretro']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',\n    #               'iso', 'sms', 'bms', 'gg', 'sg', '68k', 'sgd', 'chd', 'm3u']",
        "detail": "platform_SegaMegadrive",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaMegadrive",
        "description": "platform_SegaMegadrive",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Megadrive(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'dgen']\n    # cores = ['genesis_plus_gx_libretro',\n    #          'fbneo_md_libretro', 'picodrive_libretro']",
        "detail": "platform_SegaMegadrive",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaMegadrive",
        "description": "platform_SegaMegadrive",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Megadrive(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'dgen']\n    # cores = ['genesis_plus_gx_libretro',\n    #          'fbneo_md_libretro', 'picodrive_libretro']\n    # extensions = ['zip', 'mdx', 'md', 'smd', 'gen', 'bin', 'cue',",
        "detail": "platform_SegaMegadrive",
        "documentation": {}
    },
    {
        "label": "Platform_SG1000",
        "kind": 6,
        "importPath": "platform_SegaSG1000",
        "description": "platform_SegaSG1000",
        "peekOfCode": "class Platform_SG1000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'gearsystem']\n    # cores = ['gearsystem_libretro', 'bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',\n    #               'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']\n    def run(self):",
        "detail": "platform_SegaSG1000",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaSG1000",
        "description": "platform_SegaSG1000",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_SG1000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'gearsystem']\n    # cores = ['gearsystem_libretro', 'bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',",
        "detail": "platform_SegaSG1000",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaSG1000",
        "description": "platform_SegaSG1000",
        "peekOfCode": "DEBUGGING = True\nclass Platform_SG1000(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'gearsystem']\n    # cores = ['gearsystem_libretro', 'bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',\n    #               'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']",
        "detail": "platform_SegaSG1000",
        "documentation": {}
    },
    {
        "label": "Platform_Saturn",
        "kind": 6,
        "importPath": "platform_SegaSaturn",
        "description": "platform_SegaSaturn",
        "peekOfCode": "class Platform_Saturn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SegaSaturn",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaSaturn",
        "description": "platform_SegaSaturn",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Saturn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']",
        "detail": "platform_SegaSaturn",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaSaturn",
        "description": "platform_SegaSaturn",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Saturn(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'sms', 'gg', 'sg', 'bin', 'rom']\n    def run(self):",
        "detail": "platform_SegaSaturn",
        "documentation": {}
    },
    {
        "label": "Platform_Stv",
        "kind": 6,
        "importPath": "platform_SegaStv",
        "description": "platform_SegaStv",
        "peekOfCode": "class Platform_Stv(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'ccd', 'chd', 'cue', 'iso', 'mds', 'm3u']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SegaStv",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaStv",
        "description": "platform_SegaStv",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Stv(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'ccd', 'chd', 'cue', 'iso', 'mds', 'm3u']",
        "detail": "platform_SegaStv",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaStv",
        "description": "platform_SegaStv",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Stv(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'yabause', 'kronos']\n    # cores = ['yabause_libretro', 'kronos_libretro', 'mednafen_saturn_libretro']\n    # extensions = ['zip', 'ccd', 'chd', 'cue', 'iso', 'mds', 'm3u']\n    def run(self):",
        "detail": "platform_SegaStv",
        "documentation": {}
    },
    {
        "label": "Platform_Vmu",
        "kind": 6,
        "importPath": "platform_SegaVmu",
        "description": "platform_SegaVmu",
        "peekOfCode": "class Platform_Vmu(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vemulator']\n    # cores = ['vemulator_libretro']\n    # extensions = ['zip', 'vms', 'dci', 'bin']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SegaVmu",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SegaVmu",
        "description": "platform_SegaVmu",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Vmu(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vemulator']\n    # cores = ['vemulator_libretro']\n    # extensions = ['zip', 'vms', 'dci', 'bin']",
        "detail": "platform_SegaVmu",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SegaVmu",
        "description": "platform_SegaVmu",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Vmu(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'vemulator']\n    # cores = ['vemulator_libretro']\n    # extensions = ['zip', 'vms', 'dci', 'bin']\n    def run(self):",
        "detail": "platform_SegaVmu",
        "documentation": {}
    },
    {
        "label": "Platform_Zxspectrum",
        "kind": 6,
        "importPath": "platform_Sinclair",
        "description": "platform_Sinclair",
        "peekOfCode": "class Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sinclair",
        "documentation": {}
    },
    {
        "label": "Platform_Zx81",
        "kind": 6,
        "importPath": "platform_Sinclair",
        "description": "platform_Sinclair",
        "peekOfCode": "class Platform_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"81\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sinclair",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Sinclair",
        "description": "platform_Sinclair",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]",
        "detail": "platform_Sinclair",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Sinclair",
        "description": "platform_Sinclair",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):",
        "detail": "platform_Sinclair",
        "documentation": {}
    },
    {
        "label": "Platform_Zxspectrum",
        "kind": 6,
        "importPath": "platform_SinclairSpectrum",
        "description": "platform_SinclairSpectrum",
        "peekOfCode": "class Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SinclairSpectrum",
        "documentation": {}
    },
    {
        "label": "Platform_Zx81",
        "kind": 6,
        "importPath": "platform_SinclairSpectrum",
        "description": "platform_SinclairSpectrum",
        "peekOfCode": "class Platform_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"81\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SinclairSpectrum",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SinclairSpectrum",
        "description": "platform_SinclairSpectrum",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]",
        "detail": "platform_SinclairSpectrum",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SinclairSpectrum",
        "description": "platform_SinclairSpectrum",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Zxspectrum(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):",
        "detail": "platform_SinclairSpectrum",
        "documentation": {}
    },
    {
        "label": "Platform_Zx81",
        "kind": 6,
        "importPath": "platform_SinclairZx81",
        "description": "platform_SinclairZx81",
        "peekOfCode": "class Platform_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"81\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SinclairZx81",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SinclairZx81",
        "description": "platform_SinclairZx81",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"81\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]",
        "detail": "platform_SinclairZx81",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SinclairZx81",
        "description": "platform_SinclairZx81",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Zx81(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = [\"retroarch\", \"81\"]\n    # cores = [\"fuse_libretro\", \"81_libretro\"]\n    # extensions = [\"tzx\", \"tap\", \"z80\", \"rzx\", \"scl\", \"trd\", \"dsk\"]\n    def run(self):",
        "detail": "platform_SinclairZx81",
        "documentation": {}
    },
    {
        "label": "Platform_Neogeo",
        "kind": 6,
        "importPath": "platform_Snk",
        "description": "platform_Snk",
        "peekOfCode": "class Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Snk",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocket",
        "kind": 6,
        "importPath": "platform_Snk",
        "description": "platform_Snk",
        "peekOfCode": "class Platform_NeogeoPocket(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngp']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Snk",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocketColor",
        "kind": 6,
        "importPath": "platform_Snk",
        "description": "platform_Snk",
        "peekOfCode": "class Platform_NeogeoPocketColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngpc']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Snk",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Snk",
        "description": "platform_Snk",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']",
        "detail": "platform_Snk",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Snk",
        "description": "platform_Snk",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):",
        "detail": "platform_Snk",
        "documentation": {}
    },
    {
        "label": "Platform_Neogeo",
        "kind": 6,
        "importPath": "platform_SnkNeogeo",
        "description": "platform_SnkNeogeo",
        "peekOfCode": "class Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SnkNeogeo",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SnkNeogeo",
        "description": "platform_SnkNeogeo",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']",
        "detail": "platform_SnkNeogeo",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SnkNeogeo",
        "description": "platform_SnkNeogeo",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Neogeo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['fbneo_libretro', 'neocd_libretro', 'fbalpha2012_libretro']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):",
        "detail": "platform_SnkNeogeo",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocket",
        "kind": 6,
        "importPath": "platform_SnkNeogeoPocket",
        "description": "platform_SnkNeogeoPocket",
        "peekOfCode": "class Platform_NeogeoPocket(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngp']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SnkNeogeoPocket",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SnkNeogeoPocket",
        "description": "platform_SnkNeogeoPocket",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_NeogeoPocket(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngp']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']",
        "detail": "platform_SnkNeogeoPocket",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SnkNeogeoPocket",
        "description": "platform_SnkNeogeoPocket",
        "peekOfCode": "DEBUGGING = True\nclass Platform_NeogeoPocket(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngp']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):",
        "detail": "platform_SnkNeogeoPocket",
        "documentation": {}
    },
    {
        "label": "Platform_NeogeoPocketColor",
        "kind": 6,
        "importPath": "platform_SnkNeogeoPocketColor",
        "description": "platform_SnkNeogeoPocketColor",
        "peekOfCode": "class Platform_NeogeoPocketColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngpc']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SnkNeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SnkNeogeoPocketColor",
        "description": "platform_SnkNeogeoPocketColor",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_NeogeoPocketColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngpc']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']",
        "detail": "platform_SnkNeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SnkNeogeoPocketColor",
        "description": "platform_SnkNeogeoPocketColor",
        "peekOfCode": "DEBUGGING = True\nclass Platform_NeogeoPocketColor(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mednafen_ngp_libretro', 'fbneo_ngpc']\n    # extensions = ['zip', 'ngp', 'ngc', 'ngpc', 'npc']\n    def run(self):",
        "detail": "platform_SnkNeogeoPocketColor",
        "documentation": {}
    },
    {
        "label": "Platform_Psx",
        "kind": 6,
        "importPath": "platform_Sony",
        "description": "platform_Sony",
        "peekOfCode": "class Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']\n    # extensions = ['zip', 'exe', 'psx', 'psexe', 'cue', 'toc', 'bin', 'img',\n    # \t\t\t  'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']",
        "detail": "platform_Sony",
        "documentation": {}
    },
    {
        "label": "Platform_Ps2",
        "kind": 6,
        "importPath": "platform_Sony",
        "description": "platform_Sony",
        "peekOfCode": "class Platform_Ps2(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx2_libretro', 'play_libretro']\n    # extensions = ['zip', 'exe', 'psexe', 'cue', 'toc', 'bin', 'img',\n    #               'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']\n    def run(self):",
        "detail": "platform_Sony",
        "documentation": {}
    },
    {
        "label": "Platform_Psp",
        "kind": 6,
        "importPath": "platform_Sony",
        "description": "platform_Sony",
        "peekOfCode": "class Platform_Psp(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'ppsspp']\n    # cores = ['ppsspp_libretro']\n    # extensions = ['elf', 'iso', 'cso', 'prx', 'pbp']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Sony",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Sony",
        "description": "platform_Sony",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']",
        "detail": "platform_Sony",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Sony",
        "description": "platform_Sony",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']\n    # extensions = ['zip', 'exe', 'psx', 'psexe', 'cue', 'toc', 'bin', 'img',",
        "detail": "platform_Sony",
        "documentation": {}
    },
    {
        "label": "Platform_Ps2",
        "kind": 6,
        "importPath": "platform_SonyPs2",
        "description": "platform_SonyPs2",
        "peekOfCode": "class Platform_Ps2(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx2_libretro', 'play_libretro']\n    # extensions = ['zip', 'exe', 'psexe', 'cue', 'toc', 'bin', 'img',\n    #               'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']\n    def run(self):",
        "detail": "platform_SonyPs2",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SonyPs2",
        "description": "platform_SonyPs2",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Ps2(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx2_libretro', 'play_libretro']\n    # extensions = ['zip', 'exe', 'psexe', 'cue', 'toc', 'bin', 'img',",
        "detail": "platform_SonyPs2",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SonyPs2",
        "description": "platform_SonyPs2",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Ps2(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx2_libretro', 'play_libretro']\n    # extensions = ['zip', 'exe', 'psexe', 'cue', 'toc', 'bin', 'img',\n    #               'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']",
        "detail": "platform_SonyPs2",
        "documentation": {}
    },
    {
        "label": "Platform_Psp",
        "kind": 6,
        "importPath": "platform_SonyPsp",
        "description": "platform_SonyPsp",
        "peekOfCode": "class Platform_Psp(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'ppsspp']\n    # cores = ['ppsspp_libretro']\n    # extensions = ['elf', 'iso', 'cso', 'prx', 'pbp']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_SonyPsp",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SonyPsp",
        "description": "platform_SonyPsp",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Psp(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'ppsspp']\n    # cores = ['ppsspp_libretro']\n    # extensions = ['elf', 'iso', 'cso', 'prx', 'pbp']",
        "detail": "platform_SonyPsp",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SonyPsp",
        "description": "platform_SonyPsp",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Psp(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'ppsspp']\n    # cores = ['ppsspp_libretro']\n    # extensions = ['elf', 'iso', 'cso', 'prx', 'pbp']\n    def run(self):",
        "detail": "platform_SonyPsp",
        "documentation": {}
    },
    {
        "label": "Platform_Psx",
        "kind": 6,
        "importPath": "platform_SonyPsx",
        "description": "platform_SonyPsx",
        "peekOfCode": "class Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']\n    # extensions = ['zip', 'exe', 'psx', 'psexe', 'cue', 'toc', 'bin', 'img',\n    # \t\t\t  'iso', 'chd', 'pbp', 'ccd', 'ecm', 'cbn', 'mdf', 'mds', 'psf', 'm3u']",
        "detail": "platform_SonyPsx",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_SonyPsx",
        "description": "platform_SonyPsx",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']",
        "detail": "platform_SonyPsx",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_SonyPsx",
        "description": "platform_SonyPsx",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Psx(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['pcsx_rearmed_libretro',\n    # \t\t 'mednafen_psx_libretro', 'swanstation_libretro']\n    # extensions = ['zip', 'exe', 'psx', 'psexe', 'cue', 'toc', 'bin', 'img',",
        "detail": "platform_SonyPsx",
        "documentation": {}
    },
    {
        "label": "Platform_Spectravideo",
        "kind": 6,
        "importPath": "platform_Spectravideo",
        "description": "platform_Spectravideo",
        "peekOfCode": "class Platform_Spectravideo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',\n    # \t\t\t  'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']\n    def run(self):",
        "detail": "platform_Spectravideo",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Spectravideo",
        "description": "platform_Spectravideo",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Spectravideo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',",
        "detail": "platform_Spectravideo",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Spectravideo",
        "description": "platform_Spectravideo",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Spectravideo(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['bluemsx_libretro']\n    # extensions = ['rom', 'ri', 'mx1', 'mx2',\n    # \t\t\t  'col', 'dsk', 'cas', 'sg', 'sc', 'm3u']",
        "detail": "platform_Spectravideo",
        "documentation": {}
    },
    {
        "label": "Platform_MOTO",
        "kind": 6,
        "importPath": "platform_Thomson",
        "description": "platform_Thomson",
        "peekOfCode": "class Platform_MOTO(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['theodore_libretro']\n    # extensions = ['fd', 'sap', 'k7', 'm7', 'm5', 'rom']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Thomson",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Thomson",
        "description": "platform_Thomson",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_MOTO(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['theodore_libretro']\n    # extensions = ['fd', 'sap', 'k7', 'm7', 'm5', 'rom']",
        "detail": "platform_Thomson",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Thomson",
        "description": "platform_Thomson",
        "peekOfCode": "DEBUGGING = True\nclass Platform_MOTO(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['theodore_libretro']\n    # extensions = ['fd', 'sap', 'k7', 'm7', 'm5', 'rom']\n    def run(self):",
        "detail": "platform_Thomson",
        "documentation": {}
    },
    {
        "label": "Platform_Tic80",
        "kind": 6,
        "importPath": "platform_Tic80",
        "description": "platform_Tic80",
        "peekOfCode": "class Platform_Tic80(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['tic80_libretro']\n    # extensions = ['zip', 'tic']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Tic80",
        "documentation": {}
    },
    {
        "label": "Platform_TRS80",
        "kind": 6,
        "importPath": "platform_Tic80",
        "description": "platform_Tic80",
        "peekOfCode": "class Platform_TRS80(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['tic80_libretro']\n    # extensions = ['zip', 'tic']\n    def run(self):\n        emulator = [\"retroarch\"]",
        "detail": "platform_Tic80",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Tic80",
        "description": "platform_Tic80",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Tic80(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['tic80_libretro']\n    # extensions = ['zip', 'tic']",
        "detail": "platform_Tic80",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Tic80",
        "description": "platform_Tic80",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Tic80(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['tic80_libretro']\n    # extensions = ['zip', 'tic']\n    def run(self):",
        "detail": "platform_Tic80",
        "documentation": {}
    },
    {
        "label": "Platform_Gamemusic",
        "kind": 6,
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "peekOfCode": "class Platform_Gamemusic(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['gme_libretro']\n    # extensions = ['zip', 'ay', 'gbs', 'gym', 'hes',\n    # \t\t\t  'kss', 'nsf', 'nsfe', 'sap', 'spc', 'vgm', 'vgz']\n    def run(self):",
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "Platform_VideoFFMPEG",
        "kind": 6,
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "peekOfCode": "class Platform_VideoFFMPEG(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['ffmpeg_libretro']\n    # extensions = ['mkv', 'avi', 'f4v', 'f4f', '3gp', 'ogm', 'flv', 'mp4', 'mp3', 'flac', 'ogg', 'm4a', 'webm',\n    #               '3g2', 'mov', 'wmv', 'mpg', 'mpeg', 'vob', 'asf', 'divx', 'm2p', 'm2ts', 'ps', 'ts', 'mxf', 'wma', 'wav']\n    def run(self):",
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "Platform_VideoMPV",
        "kind": 6,
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "peekOfCode": "class Platform_VideoMPV(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['mpv_libretro']\n    # extensions = ['mkv', 'avi', 'f4v', 'f4f', '3gp', 'ogm', 'flv', 'mp4', 'mp3', 'flac', 'ogg', 'm4a', 'webm',\n    #               '3g2', 'mov', 'wmv', 'mpg', 'mpeg', 'vob', 'asf', 'divx', 'm2p', 'm2ts', 'ps', 'ts', 'mxf', 'wma', 'wav']\n    def run(self):",
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "peekOfCode": "FULLSCREEN = False\nDEBUGGING = True\nclass Platform_Gamemusic(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['gme_libretro']\n    # extensions = ['zip', 'ay', 'gbs', 'gym', 'hes',",
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platform_Wild",
        "description": "platform_Wild",
        "peekOfCode": "DEBUGGING = True\nclass Platform_Gamemusic(PlatformCommon):\n    # Set up the emulator we want to run.\n    # in case we are running retroarch, we need to set the libretro core (fullpath or shortname).\n    # Set whether we should run in fullscreens or not.\n    # Supply A list of extensions that the specified emulator supports.\n    # emulators = ['retroarch', 'other']\n    # cores = ['gme_libretro']\n    # extensions = ['zip', 'ay', 'gbs', 'gym', 'hes',\n    # \t\t\t  'kss', 'nsf', 'nsfe', 'sap', 'spc', 'vgm', 'vgz']",
        "detail": "platform_Wild",
        "documentation": {}
    },
    {
        "label": "PlatformCommon",
        "kind": 6,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "class PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True\n    def __init__(self):\n        self.showetdir = None",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "FULLSCREEN = False\nSELECTIVE_MODE = True\nDEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "SELECTIVE_MODE",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "SELECTIVE_MODE = True\nDEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "platformcommon",
        "description": "platformcommon",
        "peekOfCode": "DEBUGGING = True\nclass PlatformCommon:\n    prod_files = []\n    STEAM = [\"False\"]\n    FULLSCREEN = [\"True\"]\n    NATIVE = [\"False\"]\n    AUDIO = [\"True\"]\n    DEBUGGING = True\n    SELECTIVE_MODE = True\n    def __init__(self):",
        "detail": "platformcommon",
        "documentation": {}
    },
    {
        "label": "DEBUGGING",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "DEBUGGING = True\nparser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')\nargs = parser.parse_args()\n# In priority order",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "parser = argparse.ArgumentParser(description='Show a demo on screen.')\nparser.add_argument('pouetid', type=int, nargs='?',\n                    help='Pouet ID of the production to show')\nparser.add_argument('--platforms', action=\"store_true\",\n                    help='List supported platforms and exit')\nparser.add_argument('--random', action=\"store_true\",\n                    help='Play random productions')\nargs = parser.parse_args()\n# In priority order\nplatform_runners = [",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "args = parser.parse_args()\n# In priority order\nplatform_runners = [\n    Platform_CommodoreAmiga(),\n    Platform_Commodore128(),\n    Platform_Commodore64(),\n    Platform_CommodorePet(),\n    Platform_CommodorePlus4(),\n    Platform_CommodoreVic20(),\n    Platform_CommodoreCBMII(),",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "platform_runners",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "platform_runners = [\n    Platform_CommodoreAmiga(),\n    Platform_Commodore128(),\n    Platform_Commodore64(),\n    Platform_CommodorePet(),\n    Platform_CommodorePlus4(),\n    Platform_CommodoreVic20(),\n    Platform_CommodoreCBMII(),\n    Platform_GameCube(),\n    Platform_Wii(),",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "showetdir",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "showetdir = os.path.expanduser(\"~/.showet\")\n# RetroPieEmuDir = os.path.expanduser(\"/opt/retropie/emulators\")\n# print(\"Check: If Folder %s exists.\" % showetdir)\n# if not os.path.exists(showetdir):\n#     print(\"Warning: Folder %s does not exist\" % showetdir)\n#     os.makedirs(showetdir)\n#     print(\"Info: Folder %s Created.\" % showetdir)\n# else:\n#     print(\"Info: Folder %s exists.\" % showetdir)\n# print(\"Check: if Folder %s exists.\" % RetroPieEmuDir)",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_id",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_id = args.pouetid\nprod_url = \"http://api.pouet.net/v1/prod/?id=\" + str(prod_id)\ndatadir = showetdir + \"/data/\" + str(prod_id)\nprod_download_url = None\nprod_download_filename = None\nprod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_url",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_url = \"http://api.pouet.net/v1/prod/?id=\" + str(prod_id)\ndatadir = showetdir + \"/data/\" + str(prod_id)\nprod_download_url = None\nprod_download_filename = None\nprod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "datadir",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "datadir = showetdir + \"/data/\" + str(prod_id)\nprod_download_url = None\nprod_download_filename = None\nprod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:\n        prod_json = f.read()",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_download_url",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_download_url = None\nprod_download_filename = None\nprod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:\n        prod_json = f.read()\nelse:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_download_filename",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_download_filename = None\nprod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:\n        prod_json = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_json",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_json = None\nprod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:\n        prod_json = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):\n        os.makedirs(datadir + '/json')",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_json_filename",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_json_filename = datadir + \"/pouet.json\"\nif os.path.exists(prod_json_filename):\n    if DEBUGGING is not False:\n        print(\"Json already downloaded.\")\n    with open(prod_json_filename, 'r') as f:\n        prod_json = f.read()\nelse:\n    if not os.path.exists(datadir + '/json'):\n        os.makedirs(datadir + '/json')\n    with urllib.request.urlopen(prod_url) as url:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "data = json.loads(prod_json)\nprod_platform = None\nrunner = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if prod_platform is None and demoplat in prunner.supported_platforms():\n            prod_platform = demoplat",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_platform",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_platform = None\nrunner = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if prod_platform is None and demoplat in prunner.supported_platforms():\n            prod_platform = demoplat\n            runner = prunner",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "runner",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "runner = None\nplatforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if prod_platform is None and demoplat in prunner.supported_platforms():\n            prod_platform = demoplat\n            runner = prunner\nif not runner:",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "platforms",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "platforms = []\nfor p in data['prod']['platforms'].values():\n    platforms.append(p['slug'])\nfor prunner in platform_runners:\n    for demoplat in platforms:\n        if prod_platform is None and demoplat in prunner.supported_platforms():\n            prod_platform = demoplat\n            runner = prunner\nif not runner:\n    print(\"ERROR: Platform \" + str(platforms) + \" not supported (yet!).\")",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_download_url",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_download_url = data['prod']['download']\nprod_download_url = prod_download_url.replace(\n    \"https://files.scene.org/view\", \"https://files.scene.org/get\")\n# Check if the download is already downloaded, else just download it.\nif os.path.exists(datadir + \"/.FILES_DOWNLOADED\"):\n    print(\"\\tFile already downloaded\")\nelse:\n    if DEBUGGING is not False:\n        print(\"\\tDownloading prod file from \" + prod_download_url + \"...\")\n    filedata = urllib.request.urlopen(prod_download_url)",
        "detail": "showet",
        "documentation": {}
    },
    {
        "label": "prod_download_url",
        "kind": 5,
        "importPath": "showet",
        "description": "showet",
        "peekOfCode": "prod_download_url = prod_download_url.replace(\n    \"https://files.scene.org/view\", \"https://files.scene.org/get\")\n# Check if the download is already downloaded, else just download it.\nif os.path.exists(datadir + \"/.FILES_DOWNLOADED\"):\n    print(\"\\tFile already downloaded\")\nelse:\n    if DEBUGGING is not False:\n        print(\"\\tDownloading prod file from \" + prod_download_url + \"...\")\n    filedata = urllib.request.urlopen(prod_download_url)\n    filename = os.path.basename(filedata.url)",
        "detail": "showet",
        "documentation": {}
    }
]